use std
use testr

use xml

const main = {
	testr.run([
		[.name="simple", .fn={ctx
			simple_test(ctx)
		}],
		[.name="eof", .fn={ctx
			eof_test(ctx)
		}],
		[.name="seek", .fn={ctx
			seek_test(ctx)
		}]
	][:])
}

const compare = {ctx, x, tests
	var g, e
	var res, expect

	for (fun, ex) : tests
		res = fun(x)
		expect = ex

		g = std.fmt("{}", res)
		e = std.fmt("{}", expect)

		if !std.sleq(g, e)
			testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
		;;

		std.slfree(g)
		std.slfree(e)
	;;
}

const comparebuf = {ctx, buf, tests
	var x = std.try(xml.mkbuf(buf))
	compare(ctx, x, tests)
	xml.free(x)
}

const simple_test = {ctx
	var t : ((x : xml.ctx# -> std.result(xml.event, xml.err)), \
			std.result(xml.event, xml.err))[:]

	t = [
		({x; -> xml.next(x);}, `std.Ok `xml.Start ("doc", [][:])),
		({x; -> xml.next(x);}, `std.Ok `xml.End "doc"),
		({x; -> xml.next(x);}, `std.Ok `xml.Eof)
	][:]

	comparebuf(ctx, "<doc></doc>", t)
}

const eof_test = {ctx
	var x = std.try(xml.mkbuf("<doc></doc"))

	xml.next(x)
	xml.next(x)

	match xml.next(x)
	| `std.Ok `xml.Eof:	testr.ok(ctx)
	| a:			testr.fail(ctx, "eof: {}", a)
	;;

	match xml.next(x)
	| `std.Ok `xml.Eof:	testr.ok(ctx)
	| a:			testr.fail(ctx, "eof again: {}", a)
	;;

	xml.free(x)
}

const seek_test = {ctx
	var x = std.try(xml.mkbuf("<one><two><three>four</three></two></one>"))

	match xml.seek(x, "three")
	| `std.Ok `xml.Start ("three", _):	testr.ok(ctx)
	| e:	testr.fail(ctx, "<three>: got {}", e)
	;;

	match xml.next(x)
	| `std.Ok `xml.Characters "four":	testr.ok(ctx)
	| e:	testr.fail(ctx, "four: got {}", e)
	;;

	match xml.seekend(x, "two")
	| `std.Ok `xml.End "two":	testr.ok(ctx)
	| e:	testr.fail(ctx, "</two>: {}", e)
	;;

	match xml.next(x)
	| `std.Ok `xml.End "one":	testr.ok(ctx)
	| e:	testr.fail(ctx, "</one>: got {}", e)
	;;

	match xml.next(x)
	| `std.Ok `xml.Eof:	testr.ok(ctx)
	| e:	testr.fail(ctx, "eof: got {}", e)
	;;

	xml.free(x)
}
