use std
use bio
use testr

use xml

const main = {
	testr.run([
		[.name="utf8bom", .fn={ctx
			utf8bom_test(ctx)
		}],
		[.name="utf16bom", .fn={ctx
			utf16bom_test(ctx)
		}],
		[.name="utf16lebom", .fn={ctx
			utf16lebom_test(ctx)
		}],
		[.name="unowned", .fn={ctx
			unowned_test(ctx)
		}],
		[.name="auto", .fn={ctx
			auto_test(ctx)
		}]
	][:])
}

const utf8bom_test = {ctx
	var x, g, e
	const ex : xml.event[:] = [
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:]
	var i = 0

	match xml.mkpath("test/files/007_utf8bom.xml")
	| `std.Ok ok:
		testr.ok(ctx)
		x = ok
	| `std.Err er:
		testr.fail(ctx, "error opening utf8 bom file {}", er)
		-> void
	;;

	for ev : xml.byevent(x)
		if i >= ex.len
			testr.fail(ctx,
				"too many events {}>{}", i+1, ex.len)
			-> void
		;;
		g = std.fmt("{}", ev)
		e = std.fmt("{}", ex[i])
		if !std.sleq(g, e)
			testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
		;;
		std.slfree(g)
		std.slfree(e)
		i++
	;;

	testr.check(ctx, i == ex.len, "too few events {}<{}", i, ex.len)

	xml.free(x)
}

const utf16bom_test = {ctx
	match xml.mkpath("test/files/008a_utf16bom.xml")
	| `std.Err `xml.Eenc "UTF-16":	testr.ok(ctx)
	| `std.Err e:	testr.fail(ctx, "unexpected error {}", e)
	| `std.Ok _:	testr.fail(ctx, "opening UTF-16 file should fail")
	;;
}

const utf16lebom_test = {ctx
	match xml.mkpath("test/files/008b_utf16lebom.xml")
	| `std.Err `xml.Eenc "UTF-16":	testr.ok(ctx)
	| `std.Err e:	testr.fail(ctx, "unexpected error {}", e)
	| `std.Ok _:	testr.fail(ctx, "opening UTF-16LE file should fail")
	;;
}

const unowned_test = {ctx
	var f = std.try(bio.open("test/files/007_utf8bom.xml", bio.Rd))
	var x = std.try(xml.mkfile(f))

	for ev : xml.byevent(x)
		match ev
		| `xml.Start ("doc", _):
			break
		| _:
			testr.fail(ctx, "unexpected event {}", ev)
		;;
	;;

	xml.free(x)

	match bio.readterm(f, ">")
	| `std.Ok s:
		if !std.sleq(s, "</doc>")
			testr.fail(ctx, "didn't match: {}", s)
		;;
	| `std.Err e:
		testr.fail(ctx, "reading failed {}", e)
	;;

	bio.close(f)
}

const auto_test = {ctx
	/* just test that it can be declared auto and leaves the scope okay */
	var c = {
		var x = auto std.try(xml.mkbuf("<doc></doc>"))
		var eof = false

		for ev : xml.byevent(x)
			match ev
			| `xml.Eof:	eof = true
			| _:
			;;
		;;

		if !eof
			testr.fail(ctx, "auto test didn't reach eof")
		;;
	}

	c()

	/* presumably it was disposed now and nothing bad happened */
	testr.ok(ctx)
}
