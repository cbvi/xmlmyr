use std
use testr
use xml

const main = {
	testr.run([
		[.name="utf8bom", .fn={ctx
			utf8bom_test(ctx)
		}],
		[.name="utf16bom", .fn={ctx
			utf16bom_test(ctx)
		}],
		[.name="utf16lebom", .fn={ctx
			utf16lebom_test(ctx)
		}],
	][:])
}

const utf8bom_test = {ctx
	var x, g, e
	const ex : std.result(xml.event, void)[:] = [
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:]
	var i = 0

	match xml.mkpath("test/files/007_utf8bom.xml")
	| `std.Ok ok:
		testr.ok(ctx)
		x = ok
	| `std.Err er:
		testr.fail(ctx, "error opening utf8 bom file {}", er)
		-> void
	;;

	for ev : xml.byevent(x)
		if i >= ex.len
			testr.fail(ctx,
				"too many events {}>{}", i+1, ex.len)
			-> void
		;;
		g = std.fmt("{}", ev)
		e = std.fmt("{}", ex[i])
		if !std.sleq(g, e)
			testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
		;;
		std.slfree(g)
		std.slfree(e)
		i++
	;;

	testr.check(ctx, i == ex.len, "too few events {}<{}", i, ex.len)

	xml.free(x)
}

const utf16bom_test = {ctx
	match xml.mkpath("test/files/008a_utf16bom.xml")
	| `std.Err `xml.Eenc "UTF-16":	testr.ok(ctx)
	| `std.Err e:	testr.fail(ctx, "unexpected error {}", e)
	| `std.Ok _:	testr.fail(ctx, "opening UTF-16 file should fail")
	;;
}

const utf16lebom_test = {ctx
	match xml.mkpath("test/files/008b_utf16lebom.xml")
	| `std.Err `xml.Eenc "UTF-16":	testr.ok(ctx)
	| `std.Err e:	testr.fail(ctx, "unexpected error {}", e)
	| `std.Ok _:	testr.fail(ctx, "opening UTF-16LE file should fail")
	;;
}
