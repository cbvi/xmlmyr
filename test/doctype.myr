use std
use xml
use testr

const main = {
	testr.run([
		[.name="quote", .fn=quote_test],
		[.name="apos", .fn=apos_test],
		[.name="comment", .fn=comment_test],
		[.name="malformed", .fn=malformed_test]
	][:])
}

generic checkevent = {ctx, got : @a, expect : @a
	var g, e

	g = std.fmt("{}", got)
	e = std.fmt("{}", expect)

	if !std.sleq(g, e)
		testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
	;;

	std.slfree(g)
	std.slfree(e)
}

const checkevents = {ctx, x, expect
	var i = 0

	for ev : xml.byevent(x)
		if i >= expect.len
			testr.fail(ctx,
				"too many events, {}>{}", i+1, expect.len)
			-> void
		;;

		checkevent(ctx, ev, expect[i])
		i++
	;;

	if i != expect.len
		match xml.geterr(x)
		| `std.Some e:	testr.fail(ctx, "error {}", e)
		| `std.None:	testr.fail(ctx, "too few events {}<{}",
					i, expect.len)
		;;
	else
		testr.ok(ctx)
	;;
}

const compare = {ctx, path, expect
	var x = std.try(xml.mkpath(path))
	checkevents(ctx, x, expect)
	std.free(x)
}

const comparebuf = {ctx, str, expect
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)
	xml.free(x)
}

const compareerr = {ctx, str, expect, err
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)

	match xml.geterr(x)
	| `std.Some e:	checkevent(ctx, e, err)
	| `std.None:	testr.fail(ctx, "expected error from \"{}\"", str)
	;;

	xml.free(x)
}

const quote_test = {ctx
	compare(ctx, "test/files/006a_doctype.xml", [
		`xml.Doctype "doc [\n\t<!ENTITY t \"<t&gt;\">\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])
}

const apos_test = {ctx
	compare(ctx, "test/files/006b_doctype.xml", [
		`xml.Doctype "doc [\n\t<!ENTITY t '<t&gt;'>\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])
}

const comment_test = {ctx
	compare(ctx, "test/files/006c_doctype.xml", [
		`xml.Doctype "doc [\n\t<!-- <<< shouldn't fail -->\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<!DOCTYPE doc [ <!----> ] >", [
		`xml.Doctype "doc [ <!----> ]",
		`xml.Eof
	][:])

	comparebuf(ctx, "<!DOCTYPE doc [ <!-- -> --> ] >", [
		`xml.Doctype "doc [ <!-- -> --> ]",
		`xml.Eof
	][:])

	compareerr(ctx, "<!DOCTYPE doc [ <!-- --]><doc></doc>", [][:],
		[.line=1, .off=36, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<!DOCTYPE doc [ <!-- --> <!-- ->", [][:],
		[.line=1, .off=32, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<!DOCTYPE doc [ <!-->", [][:],
		[.line=1, .off=21, .err=`xml.Trunc `bio.Eof])
}

const malformed_test = {ctx
	compareerr(ctx, "<!DOCTYPE>", [][:],
		[.line=1, .off=10, .err= `xml.Unexpected ('>', ' ')])

	compareerr(ctx, "<!DOCTYPE doc [ < ]><doc></doc>", [][:],
		[.line=1, .off=31, .err=`xml.Trunc `bio.Eof])
}
