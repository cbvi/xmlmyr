use std
use xml
use testr

const main = {
	testr.run([
		[.name="simple", .fn={ctx
			simple_test(ctx)
		}],
		[.name="attrs", .fn={ctx
			attrs_test(ctx)
		}],
		[.name="empty", .fn={ctx
			empty_test(ctx)
		}],
		[.name="twigil", .fn={ctx
			twigil_test(ctx)
		}],
		[.name="crlf", .fn={ctx
			crlf_test(ctx)
		}],
		[.name="doctype", .fn={ctx
			doctype_test(ctx)
		}],
		[.name="bad", .fn={ctx
			bad_test(ctx)
		}],
	][:])
}

const simple_test = {ctx
	var x = std.try(xml.mkpath("test/files/001_simple.xml"))
	var o = 0
	var children = [][:]
	var in = false
	var id = false

	for ev : xml.byevent(x)
		o++
		match ev
		| `std.Ok `xml.Start ("doc", _):
			testr.check(ctx, o == 1, "<doc> out of order")
		| `std.Ok `xml.Start ("children", _):
			testr.check(ctx, o == 2, "<children> out of order")
		| `std.Ok `xml.Start ("child", _):
			in = true
		| `std.Ok `xml.Start ("id", _):
			if in
				testr.ok(ctx)
				id = true
			else
				testr.fail(ctx, "<id> unexpected")
			;;
		| `std.Ok `xml.Characters c:
			if in && id
				testr.ok(ctx)
				std.slpush(&children, std.sldup(c))
			else
				testr.fail(ctx, "characters unexpected")
			;;
		| `std.Ok `xml.End "id":
			id = false
		| `std.Ok `xml.End "child":
			in = false
		| `std.Ok `xml.End "children":
			testr.check(ctx, o == 18, "</children> out of order")
		| `std.Ok `xml.End "doc":
			testr.check(ctx, o == 19, "</doc> out of order")
		| `std.Ok `xml.Eof:
			testr.check(ctx, o == 20, "Eof unexpected")
		| `std.Ok e:
			testr.fail(ctx, "unexpected element {}", e)
		| `std.Err e:
			testr.fail(ctx, "error {}", e)
		;;
	;;

	testr.check(ctx, std.sleq(children[0], "1"), "expected child id 1")
	testr.check(ctx, std.sleq(children[1], "2"), "expected child id 2")
	testr.check(ctx, std.sleq(children[2], "3"), "expected child id 3")

	for c : children
		std.slfree(c)
	;;

	std.slfree(children)
	xml.free(x)
}

const attrs_test = {ctx
	var x = std.try(xml.mkpath("test/files/002_attrs.xml"))
	var start = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", at):
			start++
			for a : at
				match a
				| ("one", "1"):		testr.ok(ctx)
				| ("two", "two"):	testr.ok(ctx)
				| ("three", "..."):	testr.ok(ctx)
				| ("four", "fo>r"):	testr.ok(ctx)
				| _:	testr.fail(ctx, "unexpected attribute")
				;;
			;;
		| `std.Ok `xml.End "doc":
			start--
		| `std.Ok `xml.Eof:
		| `std.Ok e:
			testr.fail(ctx, "unexpected event {}", e)
		| `std.Err e:
			testr.fail(ctx, "error {}", e)
		;;
	;;

	testr.check(ctx, start == 0, "mismatched start and end tags")

	xml.free(x)
}

const empty_test = {ctx
	var x = std.try(xml.mkpath("test/files/003_empty.xml"))
	var doc = false
	var empty = false
	var o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			testr.check(ctx, !doc, "<doc> already open")
			doc = true
		| `std.Ok `xml.End "doc":
			testr.check(ctx, doc, "<doc> not open")
			doc = false
		| `std.Ok `xml.Start ("empty", _):
			testr.check(ctx, !empty, "<empty> already open")
			empty = true
		| `std.Ok `xml.End "empty":
			testr.check(ctx, empty, "<empty> not open")
			empty = false
		| `std.Ok `xml.Eof:
			testr.check(ctx, !empty, "<empty> not closed")
			testr.check(ctx, !doc, "<doc> not closed")
		| `std.Ok e:
			testr.fail(ctx, "unexpected event {}", e)
		| `std.Err e:
			testr.fail(ctx, "error {}", e)
		;;
		o++
	;;

	testr.check(ctx, o == 7, "unexpected event count {}", o)

	xml.free(x)
}

const twigil_test = {ctx
	var x = std.try(xml.mkpath("test/files/004_twigil.xml"))
	var o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Instruction ("xml", "version=\"1.0\""):
			o++
		| `std.Ok `xml.Doctype "test [\n\t<!ENTITY x \"example\">\n]":
			o++
		| `std.Ok `xml.Comment "This is a comment":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.Cdata "This is cdata":
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| `std.Ok e:
			testr.fail(ctx, "unexpected event {}", e)
		| `std.Err e:
			testr.fail(ctx, "error {}", e)
		;;
	;;

	testr.check(ctx, o == 7, "unexpected event count {}", o)

	xml.free(x)
}

const crlf_test = {ctx
	var x = std.try(xml.mkpath("test/files/005_crlf.xml"))
	var o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Comment "document contains crlf line endings":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)
}

const doctype_test = {ctx
	var x
	var o

	x = std.try(xml.mkpath("test/files/006a_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!ENTITY t \"<t&gt;\">\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkpath("test/files/006b_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!ENTITY t '<t&gt;'>\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)

/* XXX
	x = std.try(xml.mkpath("test/files/006c_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!-- shouldn't fail -->\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)
*/
}

const bad_test = {ctx
	var x, o

	x = std.try(xml.mkbuf("<doc><.child></.child></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):			o++
		| `std.Err [.line=1, .off=7, .err=`xml.Inval '.']:	o++
		|  e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<??><doc></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=4, .err=`xml.Empty]:	o++
		| e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc></doc>doc"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Err [.line=1, .off=14, .err=`xml.Trunc `bio.Eof]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 3, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc>\n<?target example instruction>\n</doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=2, .off=1, .err=`xml.Unclosed ("<?", "?>")]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=8, .err=`xml.Inval '>']:	o++
		| e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=val></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=9, .err=`xml.Unexpected ('v', '"')]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=9, .err=`xml.Unexpected ('>', '"')]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=\"val\" \"val\"></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=15, .err=`xml.Inval '"']:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc></>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=1, .off=8, .err=`xml.Inval '>']:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc><![CDATA[</doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=1, .off=7, .err=`xml.Unclosed ("<![CDATA[", "]]>")]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)
}
