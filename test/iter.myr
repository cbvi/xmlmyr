use std
use xml
use testr

const main = {
	testr.run([
		[.name="simple", .fn={ctx
			simple_test(ctx)
		}],
		[.name="attrs", .fn={ctx
			attrs_test(ctx)
		}],
		[.name="empty", .fn={ctx
			empty_test(ctx)
		}],
		[.name="twigil", .fn={ctx
			twigil_test(ctx)
		}],
		[.name="crlf", .fn={ctx
			crlf_test(ctx)
		}],
		[.name="doctype", .fn={ctx
			doctype_test(ctx)
		}],
		[.name="space", .fn={ctx
			space_test(ctx)
		}],
		[.name="frag", .fn={ctx
			frag_test(ctx)
		}]
	][:])
}

generic checkevent = {ctx, got : @a, expect : @a
	var g, e

	g = std.fmt("{}", got)
	e = std.fmt("{}", expect)

	if !std.sleq(g, e)
		testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
	;;

	std.slfree(g)
	std.slfree(e)
}

const checkevents = {ctx, x, expect
	var i = 0

	for ev : xml.byevent(x)
		if i >= expect.len
			testr.fail(ctx,
				"too many events, {}>{}", i+1, expect.len)
			-> void
		;;

		checkevent(ctx, ev, expect[i])
		i++
	;;

	if i != expect.len
		match xml.geterr(x)
		| `std.Some e:	testr.fail(ctx, "error {}", e)
		| `std.None:	testr.fail(ctx, "too few events {}<{}",
					i, expect.len)
		;;
	else
		testr.ok(ctx)
	;;
}

const compare = {ctx, path, expect
	var x = std.try(xml.mkpath(path))
	checkevents(ctx, x, expect)
	std.free(x)
}

const comparebuf = {ctx, str, expect
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)
	xml.free(x)
}

const compareerr = {ctx, str, expect, err
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)

	match xml.geterr(x)
	| `std.Some e:	checkevent(ctx, e, err)
	| `std.None:	testr.fail(ctx, "expected error from \"{}\"", str)
	;;

	xml.free(x)
}

const simple_test = {ctx
	compare(ctx, "test/files/001_simple.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Start ("children", [][:]),
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "1",
		`xml.End "id",
		`xml.End "child",
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "2",
		`xml.End "id",
		`xml.End "child",
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "3",
		`xml.End "id",
		`xml.End "child",
		`xml.End "children",
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc><.child></.child></doc>", [
		`xml.Start ("doc", [][:])

	][:], [.line=1,.off=7,.err=`xml.Inval '.'])

	compareerr(ctx, "<doc><", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=6, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<doc></>", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=8, .err=`xml.Inval '>'])

	compareerr(ctx, "<doc></", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=7, .err=`xml.Unclosed ("</", ">")])

	compareerr(ctx, "<doc></doc", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=10, .err=`xml.Unclosed ("</", ">")])
}

const attrs_test = {ctx
	compare(ctx, "test/files/002_attrs.xml", [
		`xml.Start ("doc", [
			("one", "1"),
			("two", "two"),
			("three", "..."),
			("four", "fo>r")
		][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc an></doc>", [][:],
		[.line=1,.off=8,.err=`xml.Inval '>'])

	compareerr(ctx, "<doc an=val></doc>", [][:],
		[.line=1,.off=9,.err=`xml.Unexpected ('v', '"')])

	compareerr(ctx, "<doc an=></doc>", [][:],
		[.line=1,.off=9,.err=`xml.Unexpected ('>', '"')])

	compareerr(ctx, "<doc an=\"val\" \"val\"></doc>", [][:],
		[.line=1, .off=15, .err=`xml.Inval '"'])

	compareerr(ctx, "<doc an=\"val\"", [][:],
		[.line=1, .off=13, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<doc an=\"fo>", [][:],
		[.line=1, .off=12, .err=`xml.Trunc `bio.Eof])
}

const empty_test = {ctx
	compare(ctx, "test/files/003_empty.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Start ("empty", [][:]),
		`xml.End "empty",
		`xml.Start ("empty", [][:]),
		`xml.End "empty",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<d/>", [
		`xml.Start ("d", [][:]),
		`xml.End "d",
		`xml.Eof
	][:])

	comparebuf(ctx, "<d />", [
		`xml.Start ("d", [][:]),
		`xml.End "d",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc an=\"val\"/>", [
		`xml.Start ("doc", [
			("an", "val")
		][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc /<doc></doc>", [][:],
		[.line=1, .off=7, .err=`xml.Unexpected ('<', '>')])

	compareerr(ctx, "<doc /", [][:],
		[.line=1, .off=6, .err=`xml.Trunc `bio.Eof])
}

const twigil_test = {ctx
	compare(ctx, "test/files/004_twigil.xml", [
		`xml.Instruction ("xml", "version=\"1.0\""),
		`xml.Doctype "test [\n\t<!ENTITY x \"example\">\n]",
		`xml.Comment "This is a comment",
		`xml.Start ("doc", [][:]),
		`xml.Cdata "This is cdata",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test?><doc />", [
		`xml.Instruction ("test", ""),
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test ?><doc />", [
		`xml.Instruction ("test", ""),
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test t<<<<<>>?>", [
		`xml.Instruction ("test", "t<<<<<>>"),
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><?test <??></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Instruction ("test", "<?"),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><![CDATA[]]></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Cdata "",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><!----></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Comment "",
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc><![CDATA[</doc>", [
		`xml.Start ("doc", [][:])
	][:], [.line=1,.off=7,.err=`xml.Unclosed ("<![CDATA[", "]]>")])

	compareerr(ctx, "<??><doc></doc>", [][:],
		[.line=1,.off=3,.err=`xml.Inval '?'])

	compareerr(ctx, "<? ?><doc></doc>", [][:],
		[.line=1, .off=3, .err=`xml.Inval ' '])

	compareerr(ctx, "<doc>\n<?target example instruction>\n</doc>", [
		`xml.Start ("doc", [][:])
	][:], [.line=2,.off=1,.err=`xml.Unclosed ("<?", "?>")])

	compareerr(ctx, "<doc><!", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=7, .err=`xml.Trunc `bio.Eof])
}

const crlf_test = {ctx
	compare(ctx, "test/files/005_crlf.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Comment "document contains crlf line endings",
		`xml.End "doc",
		`xml.Eof
	][:])
}

const doctype_test = {ctx
	compare(ctx, "test/files/006a_doctype.xml", [
		`xml.Doctype "doc [\n\t<!ENTITY t \"<t&gt;\">\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compare(ctx, "test/files/006b_doctype.xml", [
		`xml.Doctype "doc [\n\t<!ENTITY t '<t&gt;'>\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compare(ctx, "test/files/006c_doctype.xml", [
		`xml.Doctype "doc [\n\t<!-- <<< shouldn't fail -->\n]",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<!DOCTYPE doc [ <!----> ] >", [
		`xml.Doctype "doc [ <!----> ]",
		`xml.Eof
	][:])

	comparebuf(ctx, "<!DOCTYPE doc [ <!-- -> --> ] >", [
		`xml.Doctype "doc [ <!-- -> --> ]",
		`xml.Eof
	][:])

	compareerr(ctx, "<!DOCTYPE>", [][:],
		[.line=1, .off=10, .err= `xml.Unexpected ('>', ' ')])

	compareerr(ctx, "<!DOCTYPE doc [ < ]><doc></doc>", [][:],
		[.line=1, .off=31, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<!DOCTYPE doc [ <!-- --]><doc></doc>", [][:],
		[.line=1, .off=36, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<!DOCTYPE doc [ <!-- --> <!-- ->", [][:],
		[.line=1, .off=32, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<!DOCTYPE doc [ <!-->", [][:],
		[.line=1, .off=21, .err=`xml.Trunc `bio.Eof])
}

const space_test = {ctx
	compare(ctx, "test/files/009_space.xml", [
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])
}

const frag_test = {ctx
	comparebuf(ctx, "testing", [
		`xml.Characters "testing",
		`xml.Eof
	][:])

	comparebuf(ctx, "doc<doc></doc>", [
		`xml.Characters "doc",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc></doc>doc", [
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Characters "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Eof
	][:])

	comparebuf(ctx, "</doc>", [
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "</doc></doc></doc>", [
		`xml.End "doc",
		`xml.End "doc",
		`xml.End "doc",
		`xml.Eof
	][:])
}
