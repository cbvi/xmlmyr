use std
use xml
use testr

const main = {
	testr.run([
		[.name="simple", .fn=simple_test],
		[.name="attrs", .fn=attrs_test],
		[.name="empty", .fn=empty_test],
		[.name="twigil", .fn=twigil_test],
		[.name="crlf", .fn=crlf_test],
		[.name="space", .fn=space_test],
		[.name="frag", .fn=frag_test],
		[.name="break", .fn=break_test],
		[.name="unicode", .fn=unicode_test],
		[.name="validate", .fn=validate_test]
	][:])
}

generic checkevent = {ctx, got : @a, expect : @a
	var g, e

	g = std.fmt("{}", got)
	e = std.fmt("{}", expect)

	if !std.sleq(g, e)
		testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
	;;

	std.slfree(g)
	std.slfree(e)
}

const checkevents = {ctx, x, expect
	var i = 0

	for ev : xml.byevent(x)
		if i >= expect.len
			testr.fail(ctx,
				"too many events, {}>{}", i+1, expect.len)
			-> void
		;;

		checkevent(ctx, ev, expect[i])
		i++
	;;

	if i != expect.len
		match xml.geterr(x)
		| `std.Some e:	testr.fail(ctx, "error {}", e)
		| `std.None:	testr.fail(ctx, "too few events {}<{}",
					i, expect.len)
		;;
	else
		testr.ok(ctx)
	;;
}

const compare = {ctx, path, expect
	var x = std.try(xml.mkpath(path))
	checkevents(ctx, x, expect)
	std.free(x)
}

const comparebuf = {ctx, str, expect
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)
	xml.free(x)
}

const compareerr = {ctx, str, expect, err
	var x = std.try(xml.mkbuf(str))
	checkevents(ctx, x, expect)

	match xml.geterr(x)
	| `std.Some e:	checkevent(ctx, e, err)
	| `std.None:	testr.fail(ctx, "expected error from \"{}\"", str)
	;;

	xml.free(x)
}

const simple_test = {ctx
	compare(ctx, "test/files/001_simple.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Start ("children", [][:]),
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "1",
		`xml.End "id",
		`xml.End "child",
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "2",
		`xml.End "id",
		`xml.End "child",
		`xml.Start ("child", [][:]),
		`xml.Start ("id", [][:]),
		`xml.Characters "3",
		`xml.End "id",
		`xml.End "child",
		`xml.End "children",
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc><.child></.child></doc>", [
		`xml.Start ("doc", [][:])

	][:], [.line=1,.off=7,.err=`xml.Inval '.'])

	compareerr(ctx, "<doc><", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=6, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<doc></>", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=8, .err=`xml.Inval '>'])

	compareerr(ctx, "<doc></", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=7, .err=`xml.Unclosed ("</", ">")])

	compareerr(ctx, "<doc></doc", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=10, .err=`xml.Unclosed ("</", ">")])
}

const attrs_test = {ctx
	compare(ctx, "test/files/002_attrs.xml", [
		`xml.Start ("doc", [
			("one", "1"),
			("two", "two"),
			("three", "..."),
			("four", "fo>r")
		][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc an></doc>", [][:],
		[.line=1,.off=8,.err=`xml.Inval '>'])

	compareerr(ctx, "<doc an=val></doc>", [][:],
		[.line=1,.off=9,.err=`xml.Unexpected ('v', '"')])

	compareerr(ctx, "<doc an=></doc>", [][:],
		[.line=1,.off=9,.err=`xml.Unexpected ('>', '"')])

	compareerr(ctx, "<doc an=\"val\" \"val\"></doc>", [][:],
		[.line=1, .off=15, .err=`xml.Inval '"'])

	compareerr(ctx, "<doc an=\"val\"", [][:],
		[.line=1, .off=13, .err=`xml.Trunc `bio.Eof])

	compareerr(ctx, "<doc an=\"fo>", [][:],
		[.line=1, .off=12, .err=`xml.Trunc `bio.Eof])
}

const empty_test = {ctx
	compare(ctx, "test/files/003_empty.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Start ("empty", [][:]),
		`xml.End "empty",
		`xml.Start ("empty", [][:]),
		`xml.End "empty",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<d/>", [
		`xml.Start ("d", [][:]),
		`xml.End "d",
		`xml.Eof
	][:])

	comparebuf(ctx, "<d />", [
		`xml.Start ("d", [][:]),
		`xml.End "d",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc an=\"val\"/>", [
		`xml.Start ("doc", [
			("an", "val")
		][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc /<doc></doc>", [][:],
		[.line=1, .off=7, .err=`xml.Unexpected ('<', '>')])

	compareerr(ctx, "<doc /", [][:],
		[.line=1, .off=6, .err=`xml.Trunc `bio.Eof])
}

const twigil_test = {ctx
	compare(ctx, "test/files/004_twigil.xml", [
		`xml.Instruction ("xml", "version=\"1.0\""),
		`xml.Doctype "test [\n\t<!ENTITY x \"example\">\n]",
		`xml.Comment "This is a comment",
		`xml.Start ("doc", [][:]),
		`xml.Cdata "This is cdata",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test?><doc />", [
		`xml.Instruction ("test", ""),
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test ?><doc />", [
		`xml.Instruction ("test", ""),
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<?test t<<<<<>>?>", [
		`xml.Instruction ("test", "t<<<<<>>"),
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><?test <??></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Instruction ("test", "<?"),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><![CDATA[]]></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Cdata "",
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc><!----></doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Comment "",
		`xml.End "doc",
		`xml.Eof
	][:])

	compareerr(ctx, "<doc><![CDATA[</doc>", [
		`xml.Start ("doc", [][:])
	][:], [.line=1,.off=7,.err=`xml.Unclosed ("<![CDATA[", "]]>")])

	compareerr(ctx, "<??><doc></doc>", [][:],
		[.line=1,.off=3,.err=`xml.Inval '?'])

	compareerr(ctx, "<? ?><doc></doc>", [][:],
		[.line=1, .off=3, .err=`xml.Inval ' '])

	compareerr(ctx, "<doc>\n<?target example instruction>\n</doc>", [
		`xml.Start ("doc", [][:])
	][:], [.line=2,.off=1,.err=`xml.Unclosed ("<?", "?>")])

	compareerr(ctx, "<doc><!", [
		`xml.Start ("doc", [][:])
	][:], [.line=1, .off=7, .err=`xml.Trunc `bio.Eof])
}

const crlf_test = {ctx
	compare(ctx, "test/files/005_crlf.xml", [
		`xml.Start ("doc", [][:]),
		`xml.Comment "document contains crlf line endings",
		`xml.End "doc",
		`xml.Eof
	][:])
}

const space_test = {ctx
	compare(ctx, "test/files/009_space.xml", [
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])
}

const frag_test = {ctx
	comparebuf(ctx, "testing", [
		`xml.Characters "testing",
		`xml.Eof
	][:])

	comparebuf(ctx, "doc<doc></doc>", [
		`xml.Characters "doc",
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc></doc>doc", [
		`xml.Start ("doc", [][:]),
		`xml.End "doc",
		`xml.Characters "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "<doc>", [
		`xml.Start ("doc", [][:]),
		`xml.Eof
	][:])

	comparebuf(ctx, "</doc>", [
		`xml.End "doc",
		`xml.Eof
	][:])

	comparebuf(ctx, "</doc></doc></doc>", [
		`xml.End "doc",
		`xml.End "doc",
		`xml.End "doc",
		`xml.Eof
	][:])
}

const break_test = {ctx
	var x = std.try(xml.mkbuf("<one><two></two></one>"))
	var i = 0

	for ev : xml.byevent(x)
		match ev
		| `xml.Start ("one", _):
			break
		| e:	testr.fail(ctx, "<one> got {}", e)
		;;
	;;

	for ev : xml.byevent(x)
		match ev
		| `xml.Start ("two", _):
			if i != 0
				testr.fail(ctx, "<two> wrong order")
			;;
		| `xml.Start ("one", _):
			testr.fail(ctx, "restarted after break")
		| `xml.End "two":
			if i != 1
				testr.fail(ctx, "</two> wrong order")
			;;
			break
		| e:
			testr.fail(ctx, "<two> got {}", e)
		;;
		i++
	;;

	for ev : xml.byevent(x)
		match ev
		| `xml.End "one":	break
		| e:	testr.fail(ctx, "</one> got {}", e)
		;;
	;;

	for ev : xml.byevent(x)
		match ev
		| `xml.Eof:	break
		| e:	testr.fail(ctx, "eof got {}", e)
		;;
	;;

	for ev : xml.byevent(x)
		testr.fail(ctx, "got {} after eof", ev)
	;;

	xml.free(x)

	x = std.try(xml.mkbuf("<one>\n<two>\n<three>\n<"))

	for ev : xml.byevent(x)
		checkevent(ctx, ev, `xml.Start ("one", [][:]))
		break
	;;

	checkevents(ctx, x, [
		`xml.Start ("two", [][:]),
		`xml.Start ("three", [][:])
	][:])

	match xml.geterr(x)
	| `std.Some e:
		checkevent(ctx, e,
			[.line=4, .off=1, .err=`xml.Trunc `bio.Eof])
	| `std.None:
		testr.fail(ctx, "expected error")
	;;

	xml.free(x)
}

const unicode_test = {ctx
	comparebuf(ctx, "<文献></文献>", [
		`xml.Start ("文献", [][:]),
		`xml.End "文献",
		`xml.Eof
	][:])

	comparebuf(ctx, "<𩸽7я>表ポあA鷗ŒéＢ逍Üßªąñ丂㐀𠀀</𩸽7я>", [
		`xml.Start ("𩸽7я", [][:]),
		`xml.Characters "表ポあA鷗ŒéＢ逍Üßªąñ丂㐀𠀀",
		`xml.End "𩸽7я",
		`xml.Eof
	][:])

	comparebuf(ctx, "<ȺȾ></ȺȾ>", [
		`xml.Start ("ȺȾ", [][:]),
		`xml.End "ȺȾ",
		`xml.Eof
	][:])

	compare(ctx, "test/files/010_emoji.xml", [
		`xml.Start ("😇🔥😊", [][:]),
		`xml.Characters "👍🏿",
		`xml.End "😇🔥😊",
		`xml.Eof
	][:])

	compareerr(ctx, "<test>表ポあA鷗ŒéＢ逍Üßªąñ丂㐀𠀀</»>", [
		`xml.Start ("test", [][:]),
		`xml.Characters "表ポあA鷗ŒéＢ逍Üßªąñ丂㐀𠀀"
	][:], [.line=1, .off=26, .err=`xml.Inval '»'])
}

const validate_test = {ctx
	var x = std.try(xml.mkpath("test/files/rss.xml"))
	var elem, elems = [][:]
	var pro = false

	for ev : xml.byevent(x)
		match ev
		| `xml.Instruction ("xml", _):
			if pro
				testr.fail(ctx, "prolog after start")
			;;
			pro = true
		| `xml.Start (n, _):
			std.slpush(&elems, std.sldup(n))
		| `xml.End n:
			elem = std.slpop(&elems)
			if !std.sleq(elem, n)
				testr.fail(ctx, "mismatch {}:{}", elem, n)
			;;
			std.slfree(elem)
		| `xml.Eof:
			if elems.len > 0
				testr.fail(ctx, "unclosed elements {}", elems)
			;;
			for ele : elems
				std.slfree(ele)
			;;
		| _:
		;;
	;;
	std.slfree(elems)
	xml.free(x)
}
