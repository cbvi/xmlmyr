use std
use xml
use testr

const main = {
	testr.run([
		[.name="simple", .fn={ctx
			simple_test(ctx)
		}],
		[.name="attrs", .fn={ctx
			attrs_test(ctx)
		}],
		[.name="empty", .fn={ctx
			empty_test(ctx)
		}],
		[.name="twigil", .fn={ctx
			twigil_test(ctx)
		}],
		[.name="crlf", .fn={ctx
			crlf_test(ctx)
		}],
		[.name="doctype", .fn={ctx
			doctype_test(ctx)
		}],
		[.name="space", .fn={ctx
			space_test(ctx)
		}],
		[.name="bad", .fn={ctx
			bad_test(ctx)
		}]
	][:])
}

const compare = {ctx, x, expect : std.result(xml.event, xml.err)[:]
	var i = 0
	var g, e

	for ev : xml.byevent(x)
		if i >= expect.len
			testr.fail(ctx,
				"too many events, {}>{}", i+1, expect.len)
			-> void
		;;
		g = std.fmt("{}", ev)
		e = std.fmt("{}", expect[i])
		if !std.sleq(g, e)
			testr.fail(ctx, "got \"{}\" expected \"{}\"", g, e)
			-> void
		;;
		std.slfree(g)
		std.slfree(e)
		i++
	;;

	testr.check(ctx, i == expect.len,
		"too few events {}<{}", i, expect.len)
}

const simple_test = {ctx
	var x = std.try(xml.mkpath("test/files/001_simple.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.Start ("children", [][:]),
		`std.Ok `xml.Start ("child", [][:]),
		`std.Ok `xml.Start ("id", [][:]),
		`std.Ok `xml.Characters "1",
		`std.Ok `xml.End "id",
		`std.Ok `xml.End "child",
		`std.Ok `xml.Start ("child", [][:]),
		`std.Ok `xml.Start ("id", [][:]),
		`std.Ok `xml.Characters "2",
		`std.Ok `xml.End "id",
		`std.Ok `xml.End "child",
		`std.Ok `xml.Start ("child", [][:]),
		`std.Ok `xml.Start ("id", [][:]),
		`std.Ok `xml.Characters "3",
		`std.Ok `xml.End "id",
		`std.Ok `xml.End "child",
		`std.Ok `xml.End "children",
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const attrs_test = {ctx
	var x = std.try(xml.mkpath("test/files/002_attrs.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Start ("doc", [
			("one", "1"),
			("two", "two"),
			("three", "..."),
			("four", "fo>r")
		][:]),
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const empty_test = {ctx
	var x = std.try(xml.mkpath("test/files/003_empty.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.Start ("empty", [][:]),
		`std.Ok `xml.End "empty",
		`std.Ok `xml.Start ("empty", [][:]),
		`std.Ok `xml.End "empty",
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const twigil_test = {ctx
	var x = std.try(xml.mkpath("test/files/004_twigil.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Instruction ("xml", "version=\"1.0\""),
		`std.Ok `xml.Doctype "test [\n\t<!ENTITY x \"example\">\n]",
		`std.Ok `xml.Comment "This is a comment",
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.Cdata "This is cdata",
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const crlf_test = {ctx
	var x = std.try(xml.mkpath("test/files/005_crlf.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.Comment "document contains crlf line endings",
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const doctype_test = {ctx
	var x
	var o

	x = std.try(xml.mkpath("test/files/006a_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!ENTITY t \"<t&gt;\">\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkpath("test/files/006b_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!ENTITY t '<t&gt;'>\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)

/* XXX
	x = std.try(xml.mkpath("test/files/006c_doctype.xml"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Doctype "doc [\n\t<!-- shouldn't fail -->\n]":
			o++
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Ok `xml.Eof:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 4, "unexpected event count {}", o)

	xml.free(x)
*/
}

const space_test = {ctx
	var x = std.try(xml.mkpath("test/files/009_space.xml"))

	compare(ctx, x, [
		`std.Ok `xml.Start ("doc", [][:]),
		`std.Ok `xml.End "doc",
		`std.Ok `xml.Eof
	][:])

	xml.free(x)
}

const bad_test = {ctx
	var x, o

	x = std.try(xml.mkbuf("<doc><.child></.child></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):			o++
		| `std.Err [.line=1, .off=7, .err=`xml.Inval '.']:	o++
		|  e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<??><doc></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=4, .err=`xml.Empty]:	o++
		| e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc></doc>doc"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Ok `xml.End "doc":
			o++
		| `std.Err [.line=1, .off=14, .err=`xml.Trunc `bio.Eof]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 3, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc>\n<?target example instruction>\n</doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=2, .off=1, .err=`xml.Unclosed ("<?", "?>")]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=8, .err=`xml.Inval '>']:	o++
		| e:	testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=val></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=9, .err=`xml.Unexpected ('v', '"')]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=9, .err=`xml.Unexpected ('>', '"')]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc an=\"val\" \"val\"></doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Err [.line=1, .off=15, .err=`xml.Inval '"']:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 1, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc></>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=1, .off=8, .err=`xml.Inval '>']:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)

	x = std.try(xml.mkbuf("<doc><![CDATA[</doc>"))
	o = 0

	for ev : xml.byevent(x)
		match ev
		| `std.Ok `xml.Start ("doc", _):
			o++
		| `std.Err [.line=1, .off=7, .err=`xml.Unclosed ("<![CDATA[", "]]>")]:
			o++
		| e:
			testr.fail(ctx, "unexpected {}", e)
		;;
	;;

	testr.check(ctx, o == 2, "unexpected event count {}", o)

	xml.free(x)
}
