use std
use testr

use xml

const main = {
	testr.run([
		[.name="default", .fn=default_test],
		[.name="charref", .fn=charref_test],
		[.name="force",   .fn=force_test],
		[.name="forcecr", .fn=forcecr_test],
		[.name="unicode", .fn=unicode_test]
	][:])
}

const check = {ctx, buf, ex
	var u

	match xml.decode(buf)
	| `std.Ok o:
		u = o
	| `std.Err e:
		testr.fail(ctx, "unknown entity {}", e)
		-> void
	;;

	testr.check(ctx, std.sleq(ex, u), "got {} expected {}", u, ex) 
	std.slfree(u)
}

const checkbad = {ctx, buf, er
	match xml.decode(buf)
	| `std.Ok o:	testr.fail(ctx, "unexpectedly parsed: {}", o)
	| `std.Err e:
		testr.check(ctx, std.sleq(e, er), "got {} expected {}", e, er)
	;;
}

const checkf = {ctx, buf, ex
	var u = xml.decodef(buf)

	testr.check(ctx, std.sleq(ex, u), "got {} expected {}", u, ex) 
	std.slfree(u)
}

const default_test = {ctx
	check(ctx, "&quot;", "\"")
	check(ctx, "&amp;", "&")
	check(ctx, "&apos;", "'")
	check(ctx, "&lt;", "<")
	check(ctx, "&gt;", ">")
	check(ctx, "&quot;&amp;&apos;&lt;&gt;", "\"&'<>")
	check(ctx, "x&quot;x&amp;x&apos;x&lt;x&gt;x", "x\"x&x'x<x>x")
	check(ctx, "", "")

	checkbad(ctx, "&AMP;", "&AMP;")
	checkbad(ctx, "&aMP;", "&aMP;")
	checkbad(ctx, "&ampx;", "&ampx;")
	checkbad(ctx, "&amp", "&amp")

	checkbad(ctx, "testing &ampx; stuff", "&ampx;")
	checkbad(ctx, "testing &amp stuff", "&amp")
	checkbad(ctx, "testing & stuff", "&")
	checkbad(ctx, "testing &; stuff", "&;")
	checkbad(ctx, "& testing", "&")
	checkbad(ctx, "&; testing", "&;")
	checkbad(ctx, "testing &", "&")
	checkbad(ctx, "testing &;", "&;")

	checkbad(ctx, "&l;", "&l;")
	checkbad(ctx, "&;", "&;")

	checkbad(ctx, "&l", "&l")
	checkbad(ctx, "&", "&")

	checkbad(ctx, "&&", "&&")
	checkbad(ctx, "&&;", "&&;")

	checkbad(ctx, "&foo&amp;", "&foo&amp;")
}

const charref_test = {ctx
	check(ctx, "&#9;", "\t")
	check(ctx, "&#42;", "*")

	check(ctx, "test &#38; stuff", "test & stuff")
	check(ctx, "test &#38;", "test &")
	check(ctx, "&#38; stuff", "& stuff")
	check(ctx, "&#38;test;", "&test;")

	check(ctx, "&#x9;", "\t")
	check(ctx, "&#x2A;", "*")

	check(ctx, "test &#x26; stuff", "test & stuff")
	check(ctx, "test &#x26;", "test &")
	check(ctx, "&#x26; stuff", "& stuff")
	check(ctx, "&#x26;test;", "&test;")

	checkbad(ctx, "&#;", "&#;")
	checkbad(ctx, "&#x;", "&#x;")
	checkbad(ctx, "&#", "&#")
	checkbad(ctx, "&#x", "&#x")

	checkbad(ctx, "&#42", "&#42")
	checkbad(ctx, "&#42and stuff", "&#42and")
	checkbad(ctx, "&#42& stuff", "&#42&")
	checkbad(ctx, "stuff &#42", "&#42")

	checkbad(ctx, "&foo&#42;", "&foo&#42;")
}

const force_test = {ctx
	checkf(ctx, "&quot;", "\"")
	checkf(ctx, "&amp;", "&")
	checkf(ctx, "&apos;", "'")
	checkf(ctx, "&lt;", "<")
	checkf(ctx, "&gt;", ">")
	checkf(ctx, "&quot;&amp;&apos;&lt;&gt;", "\"&'<>")
	checkf(ctx, "x&quot;x&amp;x&apos;x&lt;x&gt;x", "x\"x&x'x<x>x")
	checkf(ctx, "", "")

	checkf(ctx, "&AMP;", "&AMP;")
	checkf(ctx, "&aMP;", "&aMP;")
	checkf(ctx, "&ampx;", "&ampx;")
	checkf(ctx, "&amp", "&amp")

	checkf(ctx, "testing &ampx; stuff", "testing &ampx; stuff")
	checkf(ctx, "testing &amp stuff", "testing &amp stuff")
	checkf(ctx, "testing & stuff", "testing & stuff")
	checkf(ctx, "testing &; stuff", "testing &; stuff")
	checkf(ctx, "& testing", "& testing")
	checkf(ctx, "&; testing", "&; testing")
	checkf(ctx, "testing &", "testing &")
	checkf(ctx, "testing &;", "testing &;")

	checkf(ctx, "&l;", "&l;")
	checkf(ctx, "&;", "&;")

	checkf(ctx, "&l", "&l")
	checkf(ctx, "&", "&")

	checkf(ctx, "&&", "&&")
	checkf(ctx, "&&;", "&&;")

	checkf(ctx, "&foo&amp;", "&foo&")
}

const forcecr_test = {ctx
	checkf(ctx, "&#9;", "\t")
	checkf(ctx, "&#42;", "*")

	checkf(ctx, "test &#38; stuff", "test & stuff")
	checkf(ctx, "test &#38;", "test &")
	checkf(ctx, "&#38; stuff", "& stuff")
	checkf(ctx, "&#38;test;", "&test;")

	checkf(ctx, "&#x9;", "\t")
	checkf(ctx, "&#x2A;", "*")

	checkf(ctx, "test &#x26; stuff", "test & stuff")
	checkf(ctx, "test &#x26;", "test &")
	checkf(ctx, "&#x26; stuff", "& stuff")
	checkf(ctx, "&#x26;test;", "&test;")

	checkf(ctx, "&#;", "&#;")
	checkf(ctx, "&#x;", "&#x;")
	checkf(ctx, "&#", "&#")
	checkf(ctx, "&#x", "&#x")

	checkf(ctx, "&#42", "&#42")
	checkf(ctx, "&#42and stuff", "&#42and stuff")
	checkf(ctx, "&#42& stuff", "&#42& stuff")
	checkf(ctx, "stuff &#42", "stuff &#42")

	checkf(ctx, "&foo&#42;", "&foo*")
}

const unicode_test = {ctx
	check(ctx, "Oh no &#xF0;&#x9F;&#x98;&#xA4;!", "Oh no ðŸ˜¤!")
	checkf(ctx, "Oh no &#xF0;&#x9F;&#x98;&#xA4;!", "Oh no ðŸ˜¤!")
}
