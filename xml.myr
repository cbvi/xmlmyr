use std
use bio

use "attributes"
use "buf"
use "chars"
use "doctype"
use "err"
use "mk"
use "types"

pkg xml =
	pkglocal const dispatch	: (x : ctx# -> std.result(event, err))
;;

const dispatch = {x
	match x.p.state
	| `Open:	-> open(x)
	| `Close:	-> close(x)
	| `Closing n:	-> closing(x, n)
	;;
}

const close = {x
	var start, stop

	match bio.readterm(x.file, "<")
	| `std.Ok s:
		newbuf(x, s)
	| `std.Err `bio.Eof:
		x.p.more = false
		-> `std.Ok `Eof
	| `std.Err e:
		-> `std.Err error(x, `Trunc e)
	;;

	start = stop = x.p.bidx

	while x.p.bidx < x.p.buf.len
		if bnext(x) == '<'
			x.p.state = `Open
			if prune(x.p.buf[start:stop]).len > 0
				-> `std.Ok `Characters x.p.buf[start:stop]
			else
				-> dispatch(x)
			;;
		;;
		stop = x.p.bidx
	;;

	if prune(x.p.buf).len > 0
		-> `std.Ok `Characters x.p.buf[start:stop]
	else
		x.p.more = false
		-> `std.Ok `Eof
	;;
}

const open = {x
	x.p.state = `Close

	match bio.peekc(x.file)
	| `std.Ok '!':	-> parseexclamation(x)
	| `std.Ok '/':	-> parseend(x)
	| `std.Ok '?':	-> parseinstruction(x)
	| `std.Ok _:	-> parseelemname(x)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;
}

const closing = {x, name
	x.p.state = `Close
	-> `std.Ok `End name
}

const parseelemname = {x
	var start, stop
	var cnt = 0

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':	goto end
		| '/':	goto selfclose
		| c:
			if namechar(c)
				stop = x.p.bidx
			elif isspace(c)
				goto attrs
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	goto unclosed

:attrs
	match parseattrs(x)
	| `std.Ok i:	cnt = i
	| `std.Err e:	-> `std.Err e
	;;

:ending
	if x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':	/* fallthrough to end */
		| '/':	goto selfclose
		| c:
			-> `std.Err error(x, `Unexpected (c, '>'))
		;;
	else
		goto unclosed
	;;

:end
	-> `std.Ok `Start (x.p.buf[start:stop], x.a.attrs[:cnt])

:selfclose
	match bexpect(x, '>')
	| `std.Ok _:
		x.p.state = `Closing x.p.buf[start:stop]
		-> `std.Ok `Start (x.p.buf[start:stop], x.a.attrs[:cnt])
	| `std.Err `Trunc `bio.Eof:
		-> `std.Err error(x, `Unclosed ("<", "/>"))
	| `std.Err e:
		-> `std.Err error(x, e)
	;;

:unclosed
	-> `std.Err error(x, `Unclosed ("<", ">"))
}

const parseexclamation = {x
	match bio.getc(x.file)
	| `std.Ok c:
		std.assert(c == '!', "BUG: parseexclamation() ! missing\n")
		x.p.off++
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match bio.peekc(x.file)
	| `std.Ok '[':	-> parsecdata(x)
	| `std.Ok '-':	-> parsecomment(x)
	| `std.Ok 'D':	-> parsedoctype(x)
	| `std.Ok c:	-> `std.Err error(x, `Inval c)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;
}

const parseend = {x
	var start, stop

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	std.assert(bnext(x) == '/', "BUG: parseend() / missing\n")

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err [.line=_, .off=_, .err=`Trunc `bio.Eof]:
		goto unclosed
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':	goto end
		| c:
			if namechar(c)
				stop = x.p.bidx
			elif isspace(c)
				beatspace(x)
				goto ending
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	goto unclosed

:ending
	match bexpect(x, '>')
	| `std.Ok _:			/* fallthrough to end */
	| `std.Err `Trunc `bio.Eof:	goto unclosed
	| `std.Err e:			-> `std.Err error(x, e)
	;;

:end
	-> `std.Ok `End x.p.buf[start:stop]

:unclosed
	-> `std.Err error(x, `Unclosed ("</", ">"))
}

const parsecdata = {x
	match fillbuf(x, "<![CDATA[", "[CDATA[", "]]>")
	| `std.Ok b:	-> `std.Ok `Cdata b
	| `std.Err e:	-> `std.Err e
	;;
}

const parsecomment = {x
	var c, end
	var start, stop

	match bio.readterm(x.file, ">")
	| `std.Ok b:	newbuf(x, b)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	for var i = 0; i < 2; i++
		match bexpect(x, '-')
		| `std.Ok _:
		| `std.Err e:	-> `std.Err error(x, e)
		;;
	;;

	end = 0
	start = stop = x.p.bidx

:again
	while x.p.bidx < x.p.buf.len
		c = bnext(x)

		if end == 2
			if c == '>'
				-> `std.Ok `Comment prune(x.p.buf[start:stop])
			else
				-> `std.Err error(x, `Unexpected (c, '>'))
			;;
		elif c == '-'
			end++
		else
			stop = x.p.bidx
			end = 0
		;;
	;;

	match bio.readterm(x.file, ">")
	| `std.Ok b:	expandbuf(x, b)
	| `std.Err `bio.Eof:
			-> `std.Err error(x, `Unclosed ("<!--", "-->"))
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	goto again
}

const parseinstruction = {x
	var c0, c1
	var ts, te
	var ds, de, dq

	match bio.getc(x.file)
	| `std.Ok d:
		std.assert(d == '?', "BUG: parseinstruction() ? missing\n")
		x.p.off++
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match bio.readterm(x.file, ">")
	| `std.Ok b:	newbuf(x, b)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match getname(x)
	| `std.Ok o:	(ts, te) = o
	| `std.Err e:	-> `std.Err e
	;;

	if x.p.bidx < x.p.buf.len
		match bnext(x)
		| '?':
			match bexpect(x, '>')
			| `std.Ok _:
				-> `std.Ok `Instruction (x.p.buf[ts:te], "")
			| `std.Err `Unexpected (c, _):
				-> `std.Err error(x, `Inval c)
			| `std.Err `Trunc `bio.Eof:
				-> `std.Err error(x, `Unclosed ("<?", "?>"))
			| `std.Err e:
				-> `std.Err error(x, e)
			;;
		| c:
			if !isspace(c)
				-> `std.Err error(x, `Inval c)
			else
				beatspace(x)
			;;
		;;
	else
		-> `std.Err error(x, `Unclosed ("<?", "?>"))
	;;

	c1 = '\0'
	ds = de = dq = x.p.bidx

:again
	while x.p.bidx < x.p.buf.len
		c0 = bnext(x)

		if c0 == '?'
			if c1 == '?'
				de = dq
			else
				dq = x.p.bidx
			;;
		elif c0 == '>' && c1 == '?'
			-> `std.Ok `Instruction (x.p.buf[ts:te], x.p.buf[ds:de])
		else
			de = x.p.bidx
		;;

		c1 = c0
	;;

	match bio.readterm(x.file, ">")
	| `std.Ok b:		expandbuf(x, b)
	| `std.Err `bio.Eof:	-> `std.Err error(x, `Unclosed ("<?", "?>"))
	| `std.Err e:		-> `std.Err error(x, `Trunc e)
	;;

	goto again
}
