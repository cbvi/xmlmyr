use std
use bio

use "chars"

pkg xml =
	const mkbuf	:	(s : byte[:] -> xml#)
	const mkfile	:	(f : bio.file# -> xml#)
	const byevent	:	(x : xml# -> xml)
	const free 	:	(x : xml# -> void)

	impl iterable xml -> std.result(event, error)
;;

impl iterable xml -> std.result(event, error) =
	__iternext__ = {iterp, valp
			if iterp.error
				-> false
			;;

			valp# = dispatch(iterp)
			if iterp.more
				-> true
			else
				-> false
			;;
	}

	__iterfin__ = {iterp, valp
		match valp#
		| `std.Ok `Start (n, a):
			std.slfree(a)
		| _:
		;;
	}
;;

type xml = struct
	file	:	bio.file#
	buf	:	byte[:]
	bidx	:	std.size
	bcur	:	std.size
	line	:	std.size
	off	:	std.size
	state	:	state
	more	:	bool
	error	:	bool
;;

type error = struct
	line	:	std.size
	off	:	std.size
	err	:	errtype
;;

type errtype = union
	`Empty
	`Inval	char
	`Junk	char
	`Trunc	bio.err
	`Unexpected (char, char)
	`NYI
;;

type state = union
	`Open
	`Close
;;

type event = union
	`Eof
	`Start		(byte[:], (byte[:], byte[:])[:])
	`End		byte[:]
	`Characters	byte[:]
	`Comment	byte[:]
;;

const dispatch = {x
	match x.state
	| `Open:	-> open(x)
	| `Close:	-> close(x)
	;;
}

const close = {x
	var start, stop

	x.state = `Open

	match bio.readterm(x.file, "<")
	| `std.Ok s:
		newbuf(x, s)
	| `std.Err `bio.Eof:
		x.more = false
		-> `std.Ok `Eof
	| `std.Err e:
		-> `std.Err error(x, `Trunc e)
	;;

	start = stop = x.bidx

	while x.bidx < x.buf.len
		match bnext(x)
		| '<':
			if std.strstrip(x.buf[start:stop]).len > 0
				/* TODO entities */
				-> `std.Ok `Characters x.buf[start:stop]
			else
				-> dispatch(x)
			;;
		| c:
			stop = x.bidx
		;;
	;;

	if std.strstrip(x.buf).len > 0
		-> `std.Err error(x, `Trunc `bio.Eof)
	else
		x.more = false
		-> `std.Ok `Eof
	;;
}

const open = {x
	x.state = `Close

	match bio.peekc(x.file)
	| `std.Ok '!':	-> parseexclamation(x)
	| `std.Ok '/':	-> parseend(x)
	| `std.Ok '?':	/* XXX */
	| `std.Ok '>':	-> `std.Err error(x, `Empty)
	| `std.Ok _:	-> parseelemname(x)
	| `std.Err `bio.Eof:
		x.more = false
		-> `std.Ok `Eof
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	-> `std.Err error(x, `NYI)
}

const parseelemname = {x
	var start, stop
	var attrs = [][:]
	var ex = false

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match bnext(x)
	| '>':	-> `std.Err error(x, `Empty)
	| '/':	-> `std.Err error(x, `Empty)
	| c:
		if namestartchar(c)
			start =  x.bcur
			stop = x.bidx
		else
			-> `std.Err error(x, `Inval c)
		;;
	;;

	while x.bidx < x.buf.len
		match bnext(x)
		| '>':
			-> `std.Ok `Start (x.buf[start:stop], attrs)
		| '/':
			if x.buf[start:stop].len > 0
				/* XXX */
				-> `std.Err error(x, `NYI)
			else
				-> `std.Err error(x, `Empty)
			;;
		| c:
			if ex
				-> `std.Err error(x, `Unexpected (c, '>'))
			elif namechar(c)
				stop = x.bidx
			elif isspace(c)
				match parseattrs(x, &attrs)
				| `std.Ok _:
					ex = true
				| `std.Err e:
					std.slfree(attrs)
					-> `std.Err e
				;;
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parseexclamation = {x
	std.assert(std.try(bio.getc(x.file)) == '!', "! not found")
	x.off++

	match bio.peekc(x.file)
	| `std.Ok '[':	-> parsecdata(x)
	| `std.Ok '-':	-> parsecomment(x)
	| `std.Ok 'D':	/* XXX */
	| `std.Ok c:	-> `std.Err error(x, `Junk c)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	-> `std.Err error(x, `NYI)
}

const parseend = {x
	var start, stop
	var spaced = false

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	std.assert(bnext(x) == '/', "/ not found")

	match bnext(x)
	| c:
		if namestartchar(c)
			start = x.bcur
			stop = x.bidx
		else
			-> `std.Err error(x, `Inval c)
		;;
	;;

	while x.bidx < x.buf.len
		match bnext(x)
		| '>':
			-> `std.Ok `End x.buf[start:stop]
		| c:
			if isspace(c)
				spaced = true
				eatspace(x)
			elif !spaced && namechar(c)
				stop = x.bidx
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parseattrs = {x, attrs
	var name, val

	eatspace(x)

	while x.bidx < x.buf.len
		match bpeek(x)
		| '>':	-> `std.Ok void
		| '/':	-> `std.Err error(x, `NYI)	/* XXX */
		| _:
		;;

		match parseattrname(x)
		| `std.Ok n:	name = n
		| `std.Err e:	-> `std.Err e
		;;

		match parseattrval(x)
		| `std.Ok v:	val = v
		| `std.Err e:	-> `std.Err e
		;;

		std.slpush(attrs, (name, val))

		eatspace(x)
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parseattrname = {x
	var start, stop
	var spaced = false

	eatspace(x)

	match bnext(x)
	| '/':	-> `std.Err error(x, `NYI)	/* XXX */
	| c:
		if namestartchar(c)
			start =  x.bcur
			stop = x.bidx
		else
			-> `std.Err error(x, `Inval c)
		;;
	;;

	while x.bidx < x.buf.len
		match bnext(x)
		| '=':	-> `std.Ok x.buf[start:stop]
		| c:
			if spaced
				-> `std.Err error(x, `Unexpected (c, '='))
			elif namechar(c)
				stop = x.bidx
			elif isspace(c)
				spaced = true
				eatspace(x)
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parseattrval = {x
	var start, stop
	var q

	eatspace(x)

	match bnext(x)
	| '"':	q = '"'
	| '\'':	q = '\''
	| c:	-> `std.Err error(x, `Unexpected (c, '"'))
	;;

	start = stop = x.bidx

	while x.bidx < x.buf.len
		if bnext(x) == q
			-> `std.Ok x.buf[start:stop]
		else
			stop = x.bidx
		;;
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parsecdata = {x
	const cdst = "[CDATA["
	const cden = "]]>"
	var c

	match bio.readterm(x.file, cden)
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	taste(x)

	for cc : std.bychar(cdst)
		c = bnext(x)
		if c != cc
			-> `std.Err error(x, `Unexpected (c, cc))
		;;
	;;

	if std.hassuffix(x.buf, cden) && x.bidx < x.buf.len
		-> `std.Ok `Characters x.buf[x.bidx:x.buf.len-cden.len]
	else
		-> `std.Err error(x, `Trunc `bio.Eof)
	;;
}

const parsecomment = {x
	const cost = "--"
	const coen = "-->"

	match bio.readterm(x.file, coen)
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	taste(x)

	for cc : std.bychar(cost)
		match bnext(x)
		| c:
			if c != cc
				-> `std.Err error(x, `Unexpected (c, cc))
			;;
		;;
	;;

	if std.hassuffix(x.buf, coen) && x.bidx < x.buf.len
		-> `std.Ok `Comment x.buf[x.bidx:x.buf.len-coen.len]
	else
		-> `std.Err error(x, `Trunc `bio.Eof)
	;;
}

const bpeek = {x
	if x.bidx < x.buf.len
		-> std.decode(x.buf[x.bidx:])
	else
		-> std.Badchar
	;;
}

const bnext = {x
	if x.bidx >= x.buf.len
		-> std.Badchar
	;;

	var c = std.decode(x.buf[x.bidx:])
	x.bcur = x.bidx
	x.bidx += std.charlen(c)

	if c == '\n'
		x.line++
		x.off = 0
	else
		x.off++
	;;

	-> c
}

const newbuf = {x, buf
	std.slfree(x.buf)
	x.bidx = x.bcur = 0
	x.buf = buf
}

const eatspace = {x
	while true
		match bpeek(x)
		| ' ':
		| '\n':
		| '\t':
		| '\r':
		| _:	break
		;;

		bnext(x)
	;;
}

const taste = {x
	for c : std.bychar(x.buf)
		if c == '\n'
			x.line++
			x.off = 0
		else
			x.off++
		;;
	;;
}

/* like bio.skipspace but includes \r and increments the offsets */
const skipspace = {x
	while true
		match bio.peekc(x.file)
		| `std.Ok ' ':
		| `std.Ok '\n':
			x.line++
			x.off = 0
			goto nl
		| `std.Ok '\t':
		| `std.Ok '\r':
		| `std.Ok _:
			break
		| `std.Err _:
			break
		;;

		x.off++
:nl
		bio.getc(x.file)
	;;
}

const error = {x, e
	x.error = true
	-> [.line = x.line, .off = x.off, .err = e]
}

const free = {x
	bio.close(x.file)
	std.slfree(x.buf)
	std.free(x)
}

const mkbuf = {s
	var x = std.mk([
		.file = bio.mkmem(s),
		.buf = [][:],
		.bidx = 0,
		.bcur = 0,
		.line = 1,
		.off = 0,
		.state = `Close,
		.more = true,
		.error = false
	])

	skipspace(x)

	-> x
}

const mkfile = {f
	var x = std.mk([
		.file = f,
		.buf = [][:],
		.bidx = 0,
		.bcur = 0,
		.line = 1,
		.off = 0,
		.state = `Close,
		.more = true,
		.error = false
	])

	skipspace(x)

	-> x
}

const byevent = {x
	-> x#
}
