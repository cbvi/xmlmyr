use std
use bio

use "buf"
use "chars"
use "doctype"
use "err"
use "mk"
use "types"

pkg xml =
	pkglocal const dispatch	: (x : ctx# -> std.result(event, err))
;;

const dispatch = {x
	match x.p.state
	| `Open:	-> open(x)
	| `Close:	-> close(x)
	| `Closing n:	-> closing(x, n)
	;;
}

const close = {x
	var start, stop

	match bio.readterm(x.file, "<")
	| `std.Ok s:
		newbuf(x, s)
	| `std.Err `bio.Eof:
		x.p.more = false
		-> `std.Ok `Eof
	| `std.Err e:
		-> `std.Err error(x, `Trunc e)
	;;

	start = x.p.bidx

	while x.p.bidx < x.p.buf.len
		if bnext(x) == '<'
			stop = x.p.bcur
			x.p.state = `Open
			if prune(x.p.buf[start:stop]).len > 0
				-> `std.Ok `Characters x.p.buf[start:stop]
			else
				-> dispatch(x)
			;;
		;;
	;;

	stop = x.p.bidx

	if prune(x.p.buf).len > 0
		-> `std.Ok `Characters x.p.buf[start:stop]
	else
		x.p.more = false
		-> `std.Ok `Eof
	;;
}

const open = {x
	x.p.state = `Close

	match bio.peekc(x.file)
	| `std.Ok '!':	-> parseexclamation(x)
	| `std.Ok '/':	-> parseend(x)
	| `std.Ok '?':	-> parseinstruction(x)
	| `std.Ok _:	-> parseelemname(x)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;
}

const closing = {x, name
	x.p.state = `Close
	-> `std.Ok `End name
}

const parseelemname = {x
	var start, stop
	var attrs = [][:]
	var ex = false

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':
			if !ex
				stop = x.p.bcur
			;;
			-> `std.Ok `Start (x.p.buf[start:stop], attrs)
		| '/':
			if !ex
				stop = x.p.bcur
			;;
			-> parseselfclose(x, x.p.buf[start:stop], attrs)
		| c:
			if ex
				-> `std.Err error(x, `Unexpected (c, '>'))
			elif namechar(c)
				continue
			elif isspace(c)
				stop = x.p.bcur
				match parseattrs(x, &attrs)
				| `std.Ok _:
					ex = true
				| `std.Err e:
					std.slfree(attrs)
					-> `std.Err e
				;;
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	std.slfree(attrs)
	-> `std.Err error(x, `Unclosed ("<", ">"))
}

const parseexclamation = {x
	match bio.getc(x.file)
	| `std.Ok '!':	x.p.off++
	| `std.Ok c:	-> `std.Err error(x, `Unexpected (c, '!'))
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match bio.peekc(x.file)
	| `std.Ok '[':	-> parsecdata(x)
	| `std.Ok '-':	-> parsecomment(x)
	| `std.Ok 'D':	-> parsedoctype(x)
	| `std.Ok c:	-> `std.Err error(x, `Inval c)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;
}

const parseend = {x
	var start, stop

	match bio.readterm(x.file, ">")
	| `std.Ok s:	newbuf(x, s)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match bnext(x)
	| '/':
	| c:	-> `std.Err error(x, `Unexpected (c, '/'))
	;;

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err [.line=_, .off=_, .err=`Trunc `bio.Eof]:
		goto unclosed
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':
			stop = x.p.bcur
			goto end
		| c:
			if namechar(c)
				continue
			elif isspace(c)
				stop = x.p.bcur
				beatspace(x)
				goto ending
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	goto unclosed

:ending
	if x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':	goto end
		| c:	-> `std.Err error(x, `Unexpected (c, '>'))
		;;
	else
		goto unclosed
	;;

:end
	-> `std.Ok `End x.p.buf[start:stop]

:unclosed
	-> `std.Err error(x, `Unclosed ("</", ">"))
}

const parseselfclose = {x, name, attrs
	if x.p.bidx < x.p.buf.len
		match bnext(x)
		| '>':
			x.p.state = `Closing name
			-> `std.Ok `Start (name, attrs)
		| c:
			-> `std.Err error(x, `Unexpected (c, '>'))
		;;
	else
		-> `std.Err error(x, `Trunc `bio.Eof)
	;;
}

const parseattrs = {x, attrs
	var name, val
	var offs = [][:]
	var err

	beatspace(x)

	while x.p.bidx < x.p.buf.len
		match bpeek(x)
		| '>':	goto done
		| '/':	goto done
		| _:
		;;

		match parseattrname(x)
		| `std.Ok n:	name = n
		| `std.Err e:
			err = e
			goto err
		;;

		match parseattrval(x)
		| `std.Ok v:	val = v
		| `std.Err e:
			err = e
			goto err
		;;

		std.slpush(&offs, (name, val))

		beatspace(x)
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)

:done
	for off : offs
		match off
		| ((ns, ne), (vs, ve)):
			std.slpush(attrs, (x.p.buf[ns:ne], x.p.buf[vs:ve]))
		;;
	;;
	std.slfree(offs)
	-> `std.Ok void

:err
	std.slfree(offs)
	-> `std.Err err
}

const parseattrname = {x
	var start, stop
	var spaced = false

	beatspace(x)

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '=':
			if !spaced
				stop = x.p.bcur
			;;
			-> `std.Ok (start, stop)
		| c:
			if spaced
				-> `std.Err error(x, `Unexpected (c, '='))
			elif namechar(c)
				continue
			elif isspace(c)
				spaced = true
				stop = x.p.bcur
				beatspace(x)
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	-> `std.Err error(x, `Trunc `bio.Eof)
}

const parseattrval = {x
	var start, stop
	var q

	beatspace(x)

	match bnext(x)
	| '"':	q = '"'
	| '\'':	q = '\''
	| c:	-> `std.Err error(x, `Unexpected (c, '"'))
	;;

	start = x.p.bidx

	while true
		while x.p.bidx < x.p.buf.len
			if bnext(x) == q
				stop = x.p.bcur
				-> `std.Ok (start, stop)
			;;
		;;

		match bio.readterm(x.file, ">")
		| `std.Ok s:	expandbuf(x, s)
		| `std.Err e:	-> `std.Err error(x, `Trunc e)
		;;
	;;
	std.die("unreached\n")
}

const parsecdata = {x
	match fillbuf(x, "<![CDATA[", "[CDATA[", "]]>")
	| `std.Ok b:	-> `std.Ok `Cdata b
	| `std.Err e:	-> `std.Err e
	;;
}

const parsecomment = {x
	match fillbuf(x, "<!--", "--", "-->")
	| `std.Ok b:	-> `std.Ok `Comment prune(b)
	| `std.Err e:	-> `std.Err e
	;;
}

const parseinstruction = {x
	const suf = "?>"
	var start, stop
	var ts, te
	var err

	match bio.getc(x.file)
	| `std.Ok '?':	x.p.off += 1
	| `std.Ok c:	-> `std.Err error(x, `Unexpected (c, '?'))
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	err = [.line=x.p.line, .off=x.p.off, .err=`Unclosed ("<?", "?>")]

	match bio.readterm(x.file, suf)
	| `std.Ok b:	newbuf(x, b)
	| `std.Err e:	-> `std.Err error(x, `Trunc e)
	;;

	match startname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err e:	-> `std.Err e
	;;

	while x.p.bidx < x.p.buf.len - suf.len
		match bnext(x)
		| c:	if namechar(c)
				continue
			elif isspace(c)
				stop = x.p.bcur
				beatspace(x)
				goto namedone
			else
				-> `std.Err error(x, `Inval c)
			;;
		;;
	;;

	stop = x.p.bidx

:namedone
	(ts, te) = (start, stop)
	start = x.p.bidx

	while x.p.bidx < x.p.buf.len - suf.len
		bnext(x)
	;;

	stop = x.p.bidx

	for s : std.bychar(suf)
		if s != bnext(x)
			-> `std.Err err
		;;
	;;

	-> `std.Ok `Instruction (x.p.buf[ts:te], x.p.buf[start:stop])
}
