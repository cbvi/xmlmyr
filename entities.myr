use std

pkg xml =
	const decode	: (s : byte[:] -> std.result(byte[:], byte[:]))
	const decodef	: (s : byte[:] -> byte[:])
;;

const ens = [
	("&amp;", '&'),
	("&apos;", '\''),
	("&lt;", '<'),
	("&gt;", '>'),
	("&quot;", '"')
][:]

const decode = {s
	-> dodecode(s, true)
}

const decodef = {s
	match dodecode(s, false)
	| `std.Ok d:	-> d
	| `std.Err _:	std.die("BUG: decodef can't fail\n")
	;;
}

const dodecode = {s, fatal
	var sb = std.mksb()
	var start, idx

	start = idx = 0

	while idx < s.len
		match std.decode(s[idx:])
		| '&':	match unencode(s[idx:])
			| `std.Some (i, len):
				std.sbputs(sb, s[start:idx])
				if i > 255
					std.sbputc(sb, (i : char))
				else
					std.sbputb(sb, (i : byte))
				;;
				idx += len
				start = idx
			| `std.None:
				if fatal
					goto err
				else
					idx += std.charlen('&')
				;;
			;;
		| c:	idx += std.charlen(c)
		;;
	;;

	std.sbputs(sb, s[start:])

	-> `std.Ok std.sbfin(sb)

:err
	std.sbfree(sb)
	-> `std.Err s[idx : idx + errend(s[idx:])]
}

const unencode = {s
	match charref(s)
	| `std.Some cr:	-> `std.Some cr
	| `std.None:
	;;

	for (name, char) : ens
		if s.len >= name.len && std.sleq(name, s[:name.len])
			-> `std.Some (char, name.len)
		;;
	;;

	-> `std.None
}

const charref = {s
	const pref = "&#"
	var idx, end
	var base

	if std.hasprefix(s, pref)
		idx = pref.len
	else
		-> `std.None
	;;

	match findsc(s)
	| `std.Some i:	end = i
	| `std.None:	-> `std.None
	;;

	match std.decode(s[idx:])
	| 'x':
		base = 16
		idx += std.charlen('x')
	| _:
		base = 10
	;;

	if end - idx < 1
		-> `std.None
	;;

	match std.intparsebase(s[idx:end], base)
	| `std.Some i:	-> `std.Some (i, end + std.charlen(';'))
	| `std.None:	-> `std.None
	;;
}

const findsc = {s
	var c
	for var i = 0; i < s.len; i += std.charlen(c)
		c = std.decode(s[i:])
		if c == ';'
			-> `std.Some i
		;;
	;;

	-> `std.None
}

const errend = {s
	var i = 0
	var c

	while i < s.len
		c = std.decode(s[i:])
		if c == ';'
			i += std.charlen(c)
			break
		elif c == '\r' || std.isspace(c)
			break
		else
			i += std.charlen(c)
		;;
	;;

	-> i
}
