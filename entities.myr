use std

use "chars"

pkg xml =
	const decode	: (s : byte[:] -> std.result(byte[:], byte[:]))
	const decodef	: (s : byte[:] -> byte[:])
;;

const decode = {s
	-> dodecode(s, true)
}

const decodef = {s
	match dodecode(s, false)
	| `std.Ok d:	-> d
	| `std.Err _:	std.die("BUG: decodef can't fail\n")
	;;
}

const charrefchars = {c
	-> c >= '0' && c <= '9' || \
	   c >= 'a' && c <= 'f' || \
	   c >= 'A' && c <= 'F'
}

const dodecode = {s, fatal
	var sb = std.mksb()
	var idx = 0
	var stok = idx
	var sp
	var base
	var c

:again
	if idx < s.len
		c = std.decode(s[idx:])
		if c != '&'
			idx += std.charlen(c)
			goto again
		else
			std.sbputs(sb, s[stok:idx])
			stok = idx
			idx += std.charlen(c)
			sp = idx
		;;
	else
		goto end
	;;

	if idx < s.len
		c = std.decode(s[idx:])
		idx += std.charlen(c)
		if c == '#'
			goto charref
		;;
	else
		goto eof
	;;

:findentend
	if idx < s.len
		c = std.decode(s[idx:])
		if c != ';'
			/* sanity check so decodef can't run away too far */
			if namechar(c)
				idx += std.charlen(c)
				goto findentend
			else
				goto err
			;;
		;;
	else
		goto eof
	;;

	if sp >= idx
		goto err
	;;

	match s[sp:idx]
	| "amp":	std.sbputc(sb, '&')
	| "lt":		std.sbputc(sb, '<')
	| "gt":		std.sbputc(sb, '>')
	| "apos":	std.sbputc(sb, '\'')
	| "quot":	std.sbputc(sb, '"')
	| _:
		idx += std.charlen(c)
		goto err
	;;

	idx += std.charlen(c)
	stok = idx
	goto again

:charref
	if idx < s.len
		sp += std.charlen(c)
		c = std.decode(s[idx:])
		idx += std.charlen(c)
		if c == 'x'
			sp += std.charlen(c)
			base = 16
		else
			base = 10
		;;
	else
		goto eof
	;;

:findrefend
	if idx < s.len
		c = std.decode(s[idx:])
		if c != ';'
			/* sanity check so decodef can't run away too far */
			if charrefchars(c)
				idx += std.charlen(c)
				goto findrefend
			else
				goto err
			;;
		;;
	else
		goto eof
	;;

	if sp >= idx
		goto err
	;;

	match std.intparsebase(s[sp:idx], base)
	| `std.Some i:
		if i > 255
			std.sbputc(sb, (i : char))
		else
			std.sbputb(sb, (i : byte))
		;;
	| `std.None:	goto err
	;;

	idx += std.charlen(c)
	stok = idx
	goto again

:end
	std.sbputs(sb, s[stok:])
	-> `std.Ok std.sbfin(sb)

:err
	if fatal
		std.sbfree(sb)
		//-> `std.Err start
		-> `std.Err errend(s[stok:])
	else
		goto again
	;;

:eof
	if fatal
		std.sbfree(sb)
		//-> `std.Err start
		-> `std.Err errend(s[stok:])
	else
		std.sbputs(sb, s[stok:])
		-> `std.Ok std.sbfin(sb)
	;;
}

const errend = {s
	var i = 0
	var c

	while i < s.len
		c = std.decode(s[i:])
		if c == ';'
			i += std.charlen(c)
			break
		elif c == '\r' || std.isspace(c)
			break
		else
			i += std.charlen(c)
		;;
	;;

	-> s[:i]
}
