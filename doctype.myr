use std
use bio

use "buf"
use "chars"
use "types"

pkg xml =
	pkglocal const parsedoctype : (x : ctx# -> std.result(event, errtype))
;;

const unclosed = `Unclosed ("<!DOCTYPE", ">")

const parsedoctype = {x
	var a, z
	var open

	match bexpect(x, "DOCTYPE")
	| `std.Ok _:	x.p.off += 7
	| `std.Err e:	-> `std.Err e
	;;

	match bget(x)
	| `std.Some c:
		if !isspace(c)
			-> `std.Err `Unexpected (c, ' ')
		;;
	| `std.None:	-> `std.Err unclosed
	;;

	beatspace(x)

	a = x.p.bidx
	open = 1

:again
	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '<':
			match docomment(x)
			| `std.Ok false:	open++
			| `std.Ok true:
			| `std.Err e:		-> `std.Err e
			;;
		| '"':
			match doquote(x, '"')
			| `std.Ok _:
			| `std.Err e:	-> `std.Err e
			;;
		| '\'':
			match doquote(x, '\'')
			| `std.Ok _:
			| `std.Err e:	-> `std.Err e
			;;
		| '>':
			if --open == 0
				z = x.p.bidx - std.charlen('>')
				-> `std.Ok `Doctype prune(x.p.buf[a:z])
			;;
		| std.Badchar:
			-> `std.Err `Badchar
		| _:
		;;
	;;

	match refillbuf(x)
	| `Done:	goto again
	| `Empty:	-> `std.Err unclosed
	| `Fail e:	-> `std.Err e
	;;
}

const doquote = {x, q
	var c
:again
	while x.p.bidx < x.p.buf.len
		c = bnext(x)
		if c == q
			-> `std.Ok void
		elif c == std.Badchar
			-> `std.Err `Badchar
		;;
	;;

	match refillbuf(x)
	| `Done:	goto again
	| `Empty:	-> `std.Err unclosed
	| `Fail e:	-> `std.Err e
	;;
}

const docomment = {x
	const cms = "!--"
	var n

	n = x.p.bidx + cms.len
	if n <= x.p.buf.len && std.eq(x.p.buf[x.p.bidx:n], cms)
		x.p.bidx = n
		x.p.off += 3
	else
		-> `std.Ok false
	;;

:again
	while x.p.bidx < x.p.buf.len
		match bnext(x)
		| '-':		goto maybe
		| std.Badchar:	-> `std.Err `Badchar
		| _:
		;;
	;;

	match refillbuf(x)
	| `Done:	goto again
	| `Empty:	-> `std.Err unclosed
	| `Fail e:	-> `std.Err e
	;;

:maybe
	match bget(x)
	| `std.Some '-':
	| `std.Some std.Badchar:	-> `std.Err `Badchar
	| _:	goto again
	;;

	match bget(x)
	| `std.Some '>':
	| `std.Some std.Badchar:	-> `std.Err `Badchar
	| `std.Some c:	-> `std.Err `Unexpected (c, '>')
	| _:	goto again
	;;

	-> `std.Ok true
}
