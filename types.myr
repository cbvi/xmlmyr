use std
use bio

pkg xml =
	type eventiter = ctx

	type ctx = struct
		file	:	bio.file#
		owned	:	bool
		p	:	parser#
	;;

	type parser = struct
		buf	:	byte[:]
		bidx	:	std.size
		bcur	:	std.size
		line	:	std.size
		off	:	std.size
		state	:	state
		more	:	bool
		error	:	std.option(err)
	;;

	type event = union
		`Instruction	(byte[:], byte[:]) 	/* <?xml ..?> */
		`Doctype	byte[:]			/* <!DOCTYPE ..> */
		`Eof					/* EOF */
		`Start		(byte[:], (byte[:], byte[:])[:]) /* <foo> */
		`End		byte[:]			/* </foo> */
		`Characters	byte[:]			/* foo */
		`Cdata		byte[:]			/* <![CDATA[foo]]> */
		`Comment	byte[:]			/* <!-- .. --> */
	;;

	type mkerr = union
		`Efile		byte[:]	/* file open failed */
		`Eenc		byte[:]	/* file has unsupported encoding */
	;;

	type err = struct
		line	:	std.size
		off	:	std.size
		err	:	errtype
	;;

	type errtype = union
		`Inval		char	/* this char is invalid here */
		`Trunc		bio.err	/* parsing ended due to io err */
		`Unclosed	(byte[:], byte[:]) /* start with no end */
		`Unexpected	(char, char) /* this wasn't that */
	;;

	type state = union
		`Open
		`Close
		`Closing	byte[:]
	;;
;;
