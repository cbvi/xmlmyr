use std
use xml

use iter

const dotest = {test, dir
	var id, uri, description
	var path
	var x
	var eof = false

	match std.htget(test, "id")
	| `std.Some s:	id = s
	| `std.None:	std.fatal("id missing\n")
	;;

	match std.htget(test, "uri")
	| `std.Some s:	uri = s
	| `std.None:	std.fatal("uri missing\n")
	;;

	match std.htget(test, "description")
	| `std.Some s:	description = s
	| `std.None:	std.fatal("description missing\n")
	;;

	path = std.pathcat(dir, uri)

	match xml.mkpath(path)
	| `std.Ok o:
		x = o
	| `std.Err `xml.Eenc "UTF-16":
		-> void
	| `std.Err e:
		std.fatal("{}: {} {}\n", id, path, e)
	;;

	for ev : xml.byevent(x)
		match ev
		| `xml.Eof:	eof = true
		| _:
		;;
	;;

	match xml.geterr(x)
	| `std.Some e:
		std.put("\n")
		std.put("FAIL: ({}) {}: {}\n", id, description, e)
	| `std.None:
		std.put(".")
	;;

	if !eof
		std.put("{}: didn't reach eof\n", id)
	;;

	std.slfree(id)
	std.slfree(uri)
	std.slfree(description)
	std.slfree(path)
	xml.free(x)
}

const xmltest = {dir, suite
	var x = std.try(xml.mkpath(suite))
	var valid = false
	var test

	std.put("{}: ", suite)

	test = std.mkht()

	for ev : xml.byevent(x)
		match ev
		| `xml.Start ("TEST", attrs):
			var vers = true
			var id, uri

			id = uri = `std.None

			for a : attrs
				match a
				| ("URI", u):
					uri = `std.Some u
					/* many of the OASIS tests have valid
					   xml declared as invalid in the
					   test schema but they helpfully
					   put "pass" in the filename, *shrug*
					*/
					if std.strhas(u, "pass")
						valid = true
					;;
				| ("ID", i):
					id = `std.Some i
				| ("TYPE", "valid"):
					valid = true
				| ("VERSION", "1.1"):
					vers = false
				| _:
				;;
			;;

			if !vers
				valid = false
			;;

			if valid
				std.htput(test, "uri", std.sldup(std.get(uri)))
				std.htput(test, "id", std.sldup(std.get(id)))
			;;
		| `xml.Characters c:
			if valid
				std.htput(test, "description", std.sldup(c))
			;;
		| `xml.End "TEST":
			if valid
				dotest(test, dir)
				std.htfree(test)
				valid = false
				test = std.mkht()
			;;
		| _:
		;;
	;;

	std.htfree(test)
	xml.free(x)
	std.put("\n")
}

const main = {
	xmltest("xmlconf/xmltest", "xmlconf/xmltest/xmltest.xml")
	xmltest("xmlconf/sun", "xmlconf/sun/sun-valid.xml")
	xmltest("xmlconf/oasis", "xmlconf/oasis/oasis.xml")
	xmltest("xmlconf/ibm", "xmlconf/ibm/ibm_oasis_valid.xml")
	xmltest("xmlconf/eduni/errata-4e", "xmlconf/eduni/errata-4e/errata4e.xml")
	xmltest("xmlconf/eduni/errata-3e", "xmlconf/eduni/errata-3e/errata3e.xml")
	xmltest("xmlconf/eduni/errata-2e", "xmlconf/eduni/errata-2e/errata2e.xml")
	xmltest("xmlconf/eduni/namespaces/1.0", "xmlconf/eduni/namespaces/1.0/rmt-ns10.xml")
	xmltest("xmlconf/japanese", "xmlconf/japanese/japanese.xml")

	oasis()
}

const checkevent = {name, got, expect
	var g, e
	var r = true

	g = std.fmt("{}", got)
	e = std.fmt("{}", expect)

	if !std.sleq(g, e)
		std.put("\nMISMATCH:\n")

		for (one, two) : iter.byzip(g, e)
			std.put("{} {}\t{} {}", one, two, (one : char), (two : char))
			if one != two
				std.put("\t<=========")
			;;
			std.put("\n")
		;;

		if g.len != e.len
			std.put("LENGTH MISMATCH: got {} vs expect {}\n", g.len, e.len)
		;;
		r = false
	;;

	std.slfree(g)
	std.slfree(e)

	-> r
}

const pass = {name, expect
	const pref = "xmlconf/oasis"
	var path, x
	var i = 0
	var r = true
	var eof = false

	path = std.pathcat(pref, name)
	x = std.try(xml.mkpath(path))

	for ev : xml.byevent(x)
		if i >= expect.len
			std.put("{}: too many events {}>{}\n",
				path, i+1, expect.len)
			goto end
		;;

		if !checkevent(name, ev, expect[i])
			std.put("event {} failed\n", i+1)
			r = false
		;;
		i++

		match ev
		| `xml.Eof:	eof = true
		| _:
		;;
	;;

	if !eof
		std.put("{}: didn't reach eof\n", name)
	;;

	match xml.geterr(x)
	| `std.Some s:
		std.put("{}: had error {}\n", name, s)
	| `std.None:
	;;

	if r
		std.put(".")
	;;

:end
	xml.free(x)
	std.slfree(path)
}

const st = {n
	-> `xml.Start (n, [][:])
}

const sta = {n, a
	-> `xml.Start (n, a)
}

const en = {n
	-> `xml.End n
}

const pi = {t, d
	-> `xml.Instruction (t, d)
}

const dt = {d
	-> `xml.Doctype d
}

const ch = {c
	-> `xml.Characters c
}

const cd = {c
	-> `xml.Cdata c
}

const com = {c
	-> `xml.Comment c
}

const eof = {
	-> `xml.Eof
}

const oasis = {
	std.put("OASIS: ")

	pass("p01pass1.xml", [
		st("doc"), st("a"), st("b"), st("c"), en("c"),
		en("b"), en("a"), en("doc"), eof()
	][:])

	/* p01 */

	pass("p01pass2.xml", [
		pi("PI", "before document element"),
		com("comment after document element"),
		pi("PI", "before document element"),
		com("comment after document element"),
		pi("PI", "before document element"),
		com("comment after document element"),
		pi("PI", "before document element"),
		dt(""\
			"doc\r\n" \
			"[\r\n" \
			"<!ELEMENT doc ANY>\r\n<!ELEMENT a ANY>\r\n" \
			"<!ELEMENT b ANY>\r\n<!ELEMENT c ANY>\r\n]" \
		),
		st("doc"), st("a"), st("b"), st("c"), en("c"),
		en("b"), en("a"), en("doc"),
		com("comment after document element"),
		pi("PI", "after document element"),
		com("comment after document element"),
		pi("PI", "after document element"),
		com("comment after document element"),
		pi("PI", "after document element"),
		eof()
	][:])

	pass("p01pass3.xml", [
		st("doc"), st("a"), st("b"), st("c"), en("c"),
		en("b"), en("a"), en("doc"),
		com("comment after document element"),
		pi("PI", "after document element"),
		com("comment after document element"),
		pi("PI", "after document element"),
		com("comment after document element"),
		pi("PI", "after document element"),
		eof()
	][:])

	/* p03 */

	pass("p03pass1.xml", [st("doc"), en("doc"), eof()][:])

	/* p04 */

	pass("p04pass1.xml", [
		st("doc"),
		st("abcdefghijklmnopqrstuvwxyz"),
		en("abcdefghijklmnopqrstuvwxyz"),
		st("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
		en("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
		st("A01234567890"), en("A01234567890"),
		st([0x41, 0x2e, 0x2d, 0x3a, 0xcc, 0x80, 0xc2, 0xb7][:]),
		en([0x41, 0x2e, 0x2d, 0x3a, 0xcc, 0x80, 0xc2, 0xb7][:]),
		en("doc"), eof()
	][:])

	/* p05 */

	pass("p05pass1.xml", [
		st("doc"),
		st("A:._-0"), en("A:._-0"),
		st("::._-0"), en("::._-0"),
		st("_:._-0"), en("_:._-0"),
		st("A"), en("A"),
		st("_"), en("_"),
		st(":"), en(":"),
		en("doc"),
		eof()
	][:])

	/* p06 */

	pass("p06pass1.xml", [
		dt("" \
			"doc\r\n[\r\n" \
			"<!ELEMENT doc (a|refs)*>\r\n<!ELEMENT a EMPTY>\r\n" \
			"<!ELEMENT refs EMPTY>\r\n" \
			"<!ATTLIST refs refs IDREFS #REQUIRED>\r\n" \
			"<!ATTLIST a id ID #REQUIRED>\r\n" \
			"]" \
		),
		st("doc"),
		sta("a", [("id", "A1")][:]), en("a"),
		sta("a", [("id", "A2")][:]), en("a"),
		sta("a", [("id", "A3")][:]), en("a"),
		sta("refs", [("refs", "A1 A2 A3")][:]), en("refs"),
		sta("refs", [("refs", "A1\r\nA2\tA3")][:]), en("refs"),
		sta("refs", [("refs", "A1")][:]), en("refs"),
		en("doc"),
		eof()
	][:])

	/* p07 */

	pass("p07pass1.xml", [
		dt("" \
			"doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n" \
			"<!ATTLIST doc att (0|35a|A|-a|:a|a:|.|_a) #IMPLIED>" \
			"\r\n]" \
		),
		st("doc"), en("doc"), eof()
	][:])

	/* p08 */

	pass("p08pass1.xml", [
		dt("" \
			"doc\r\n[\r\n<!ELEMENT doc (A*)>\r\n" \
			"<!ELEMENT A EMPTY>\r\n" \
			"<!ATTLIST A att NMTOKENS #IMPLIED>\r\n" \
			"]" \
		),
		st("doc"),
		sta("A", [("att", "abc")][:]), en("A"),
		sta("A", [("att", "abc def . :")][:]), en("A"),
		sta("A", [("att", "\r\nabc\r\ndef\r\n")][:]), en("A"),
		en("doc"), eof()
	][:])

	/* p09 */

	pass("p09pass1.xml", [
		dt("doc SYSTEM \"p09pass1.dtd\""), st("doc"), en("doc"), eof()
	][:])

	/* p10 */

	pass("p10pass1.xml", [
		st("doc"),
		sta("A", [("a", "asdf>'&#34;>\r\nasdf\r\n\t?>%")][:]),
		en("A"),
		sta("A", [("a", "\"\">&#39;&#34;")][:]), en("A"),
		en("doc"), eof()
	][:])

	/* p11 */

	pass("p11pass1.xml", [
		com("Inability to resolve a notation should not be reported as an error"),
		dt("doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n" \
		   "<!NOTATION not1 SYSTEM \"a%a&b&#0<!ELEMENT<!--<?</>?>/\\''\">\r\n" \
		   "<!NOTATION not2 SYSTEM 'a\r\n\tb\"\"\"'>\r\n" \
		   "<!NOTATION not3 SYSTEM \"\">\r\n" \
		   "<!NOTATION not4 SYSTEM ''>\r\n" \
		   "]" \
		),
		st("doc"), en("doc"), eof()
	][:])

	/* p12 */

	pass("p12pass1.xml", [
		com("Inability to resolve a notation should not be reported as an error"),
		dt("doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n" \
		   "<!NOTATION not1 PUBLIC \"a b\r\n" \
		   "cdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\">\r\n" \
		   "<!NOTATION not2 PUBLIC '0123456789-()+,./:=?;!*#@$_%'>\r\n" \
		   "<!NOTATION not3 PUBLIC \"0123456789-()+,.'/:=?;!*#@$_%\">\r\n" \
		   "]" \
		),
		st("doc"), en("doc"), eof()
	][:])

	/* p14 */

	pass("p14pass1.xml", [
		st("doc"),
		ch("a%b%&lt;/doc>&#60;/doc>]]&lt;&amp;"),
		en("doc"),
		eof()
	][:])

	/* p15 */

	pass("p15pass1.xml", [
		com("a\r\n<!DOCTYPE\r\n<?-\r\n]]>-<[ CDATA [\r\n\"- -'-\r\n-<doc>"),
		com(""), st("doc"), en("doc"), eof()
	][:])

	/* p16 */

	pass("p16pass1.xml", [
		pi("pitarget", ""),
		pi("xmla", "<!DOCTYPE <[ CDATA [</doc> &a%b&#c"),
		pi("pitarget", "..."),
		pi("pitarget", ""),
		pi("pitarget", "> "),
		st("doc"), en("doc"), eof()
	][:])

	pass("p16pass2.xml", [
		pi("pitarget", "'"), st("doc"), en("doc"), eof()
	][:])

	pass("p16pass3.xml", [
		pi("pitarget", "\""),
		st("doc"), en("doc"), eof()
	][:])

	/* p18 */

	pass("p18pass1.xml", [
		st("doc"),
		cd("<doc<!DOCTYPE&a%b&#c]] >] ]> ]"),
		cd(""),
		cd("\r\n<![CDATA[\r\n"),
		en("doc"),
		eof()
	][:])

	/* p22 */

	pass("p22pass1.xml", [
		st("doc"), en("doc"), eof()
	][:])

	pass("p22pass2.xml", [
		pi("xml", "version=\"1.0\""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p22pass3.xml", [
		pi("xml", "version=\"1.0\""),
		com("comment"),
		pi("pi", ""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p22pass4.xml", [
		pi("xml", "version=\"1.0\""),
		com("comment"),
		pi("pi", ""),
		dt("doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n]"),
		com("comment"),
		pi("pi", ""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p22pass5.xml", [
		com("comment"),
		pi("pi", ""),
		dt("doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n]"),
		com("comment"),
		pi("pi", ""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p22pass6.xml", [
		pi("xml", "version=\"1.0\""),
		dt("doc\r\n[\r\n<!ELEMENT doc EMPTY>\r\n]"),
		st("doc"), en("doc"), eof()
	][:])

	/* p23 */

	pass("p23pass1.xml", [
		pi("xml", "version=\"1.0\""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p23pass2.xml", [
		pi("xml", "version=\"1.0\" encoding=\"UTF-8\""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p23pass3.xml", [
		pi("xml", "version=\"1.0\" standalone=\"yes\""),
		st("doc"), en("doc"), eof()
	][:])

	pass("p23pass4.xml", [
		pi("xml", "version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\""),
		st("doc"), en("doc"), eof()
	][:])

	std.put("\n")
}
