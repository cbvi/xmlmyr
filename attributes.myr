use std
use bio

use "buf"
use "chars"
use "types"

pkg xml =
	pkglocal const parseattrs : (x : ctx# -> std.result(std.size, errtype))
;;

const parseattrs = {x
	var name, val
	var cnt = 0

	beatspace(x)

	while x.p.bidx < x.p.buf.len
		match std.decode(x.p.buf[x.p.bidx:])
		| '>':	goto done
		| '/':	goto done
		| _:
		;;

		match parseattrname(x)
		| `std.Ok n:	name = n
		| `std.Err e:	-> `std.Err e
		;;

		beatspace(x)

		match parseattrval(x)
		| `std.Ok v:	val = v
		| `std.Err e:	-> `std.Err e
		;;

		if cnt >= x.a.offs.len
			x.a.offs = std.slgrow(&x.a.offs, 2 * x.a.offs.len)
		;;

		x.a.offs[cnt] = (name, val)
		cnt++

		if x.p.bidx < x.p.buf.len
			match std.decode(x.p.buf[x.p.bidx:])
			| '>':	goto done
			| '/':	goto done
			| c:
				if isspace(c)
					beatspace(x)
				else
					-> `std.Err `Inval c
				;;
			;;
		else
			break
		;;
	;;

	-> `std.Err `Trunc `bio.Eof

:done
	if x.a.attrs.len < x.a.offs.len
		x.a.attrs = std.slgrow(&x.a.attrs, x.a.offs.len)
	;;

	for var i = 0; i < cnt; i++
		match x.a.offs[i]
		| ((ns, ne), (vs, ve)):
			x.a.attrs[i] = (x.p.buf[ns:ne], x.p.buf[vs:ve])
		;;
	;;
	-> `std.Ok cnt
}

const parseattrname = {x
	var start, stop

	match getname(x)
	| `std.Ok o:	(start, stop) = o
	| `std.Err e:	-> `std.Err e
	;;

	match bget(x)
	| `std.Some '=':	-> `std.Ok (start, stop)
	| `std.Some c:
		if !isspace(c)
			-> `std.Err `Inval c
		;;
	| `std.None:	-> `std.Err `Trunc `bio.Eof
	;;

	beatspace(x)

	match bget(x)
	| `std.Some '=':	-> `std.Ok (start, stop)
	| `std.Some c:		-> `std.Err `Unexpected (c, '=')
	| `std.None:		-> `std.Err `Trunc `bio.Eof
	;;
}

const parseattrval = {x
	var start
	var q

	match bget(x)
	| `std.Some '"':	q = '"'
	| `std.Some '\'':	q = '\''
	| `std.Some c:		-> `std.Err `Unexpected (c, '"')
	| `std.None:		-> `std.Err `Trunc `bio.Eof
	;;

	start = x.p.bidx

:again
	while x.p.bidx < x.p.buf.len
		var c = bnext(x)
		if c == q
			-> `std.Ok (start, x.p.bidx-std.charlen(q))
		elif c == std.Badchar
			-> `std.Err `Badchar
		;;
	;;

	match refillbuf(x)
	| `Done:	goto again
	| `Empty:	-> `std.Err `Trunc `bio.Eof
	| `Fail e:	-> `std.Err e
	;;
}
