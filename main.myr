use std
use xml

const main = {arg : byte[:][:]
	var elem
	var elems = [][:]

	if arg.len < 2
		std.fatal("requries an arg\n")
	;;

	var x = std.try(xml.mkpath(arg[1]))

	for ev : xml.byevent(x)
		match ev
		| `xml.Start (n, _):
			std.slpush(&elems, std.sldup(n))
		| `xml.End n:
			elem = std.slpop(&elems)
			if !std.sleq(elem, n)
				std.put("tag {} closed while {} open\n", n, elem)
			;;
			std.slfree(elem)
		| `xml.Eof:
			if elems.len > 0
				std.put("{} unclosed tags\n", elems.len)
			;;
		| _:
		;;
	;;

	for e : elems
		std.slfree(e)
	;;

	match xml.geterr(x)
	| `std.Some e:	std.put("Error at {}:{}: {}\n", e.line, e.off, e.err)
	| `std.None:
	;;

	std.slfree(elems)
	xml.free(x)
}
