use std
use bio

use "types"

pkg xml =
	pkglocal const mk : (f : bio.file#, owned : bool -> std.result(ctx#, mkerr))

	const mkbuf	:	(s : byte[:] -> std.result(ctx#, mkerr))
	const mkpath	:	(p : byte[:] -> std.result(ctx#, mkerr))
	const mkfile	:	(f : bio.file# -> std.result(ctx#, mkerr))

	const free	:	(x : ctx# -> void)

	impl disposable ctx#
;;

impl disposable ctx# =
	__dispose__ = {x
		free(x)
	}
;;

const mk = {f, owned
	var x = std.mk([
		.file = f,
		.owned = owned,
		.p = std.mk([
			.buf = [][:],
			.ptr = (0 : byte#),
			.bidx = 0,
			.line = 1,
			.off = 0,
			.state = `Close,
			.more = true,
			.error = `std.None
		]),
		.a = std.mk([
			.offs = std.slalloc(1),
			.attrs = std.slalloc(1),
			.op = (0 : ((std.size, std.size), (std.size, std.size))#),
			.ap = (0 : (byte[:], byte[:])#)
		])
	])

	x.a.op = (x.a.offs : ((std.size, std.size), (std.size, std.size))#)
	x.a.ap = (x.a.attrs : (byte[:], byte[:])#)

	match bom(x)
	| `std.Some s:	-> `std.Err `Eenc s
	| `std.None:	-> `std.Ok x
	;;
}

const mkbuf = {s
	-> mk(bio.mkmem(s), true)
}

const mkfile = {f
	-> mk(f, false)
}

const mkpath = {p
	var f

	match bio.open(p, bio.Rd)
	| `std.Ok o:	f = o
	| `std.Err e:	-> `std.Err `Efile e
	;;

	-> mk(f, true)
}

const free = {x
	if x.owned
		bio.close(x.file)
	;;
	std.slfree(x.a.offs)
	std.slfree(x.a.attrs)
	std.free(x.a)
	std.slfree(x.p.buf)
	std.free(x.p)
	std.free(x)
}

const bom = {x
	match bio.getb(x.file)
	| `std.Ok 0xEF:	goto utf8
	| `std.Ok 0xFE:	goto utf16
	| `std.Ok 0xFF:	goto utf16le
	| _:		goto none
	;;

:utf8
	match bio.getb(x.file)
	| `std.Ok 0xBB:
	| _:		goto none
	;;

	match bio.getb(x.file)
	| `std.Ok 0xBF:	-> `std.None
	| _:		goto none
	;;

:utf16
	match bio.getb(x.file)
	| `std.Ok 0xFF:	-> `std.Some "UTF-16"
	| _:		goto none
	;;

:utf16le
	match bio.getb(x.file)
	| `std.Ok 0xFE:	-> `std.Some "UTF-16"
	| _:		goto none
	;;

:none
	bio.seek(x.file, 0)
	-> `std.None
}
